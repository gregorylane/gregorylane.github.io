workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
month = month(test_date),
year = year(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>% #Note: need to fix education, but need years equivalents
select(-c(caste, gender, religion, result))
educ_mat <- as.data.frame(cbind(unique(as.character(workers$eduction)),
as.vector(c(10, 20, 18, 12, 8, 16, 12, 10, 4, 14))))
workers %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
#sectors - and job_level are going to determine certification.
#for job level 3 need 50% to be certified, for job level 4 need 70% to be certified
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
View(sector)
#filter sectors that don't have many obs (<200)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister <- function(sector, DT, level, score) {
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 5, alpha=0.4) +
ggtitle(paste(sectorname))
}
beauty <- 49
lapply(beauty, FUN=hister, DT=workers, level=3, score="total_score")
lapply(beauty, FUN=hister, DT=workers, level=3, score="total_score")
lapply(beauty, FUN=hister, DT=workers, level=3, score="theory_score")
lapply(beauty, FUN=hister, DT=workers, level=3, score="practical_score")
# ---------------------------------------------------------------------------------
# Read and explore data sent by NSDC on November 29, 2017
# Data sent contains trainees from September 2016 until August 2017
# Created by Greg Nov 29, 2017
# Takes raw data (excel file) and cleans into usable dataframe and runs simple analysis
# ----------------------------------------------------------------------------------
# setup --------------------------------------------
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisiion/")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
}
# read data ----------------------------------------
data <- read_excel("sample/20171129_Sep2016Aug2017.xlsx")
# clean data ----------------------------------------
names(data) %<>% tolower
#keep only vars that seem to be useful (for first pass)
workers <- data %>% select(candid, castecategory, educationattained, gender, grade, religion,
result, 'total theory marks', 'total practical marks',
totalmarkobtained, batchid, 'batch start date', 'batch end date',
'assessment date', trainerid, trainergender, centreid,
jobroleid, jobrole, jobrolelevel, jobroletype,
sectorid, sectorname, subsectorid, subsectorname, assessmentstatus,
statecode, district, 'placement status', cerified, monthlyincome, yearofbirth)
#rename & clean-up
workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>%
select(-c(caste, gender, religion, result))
educ_mat <- as.data.frame(cbind(unique(as.character(workers$eduction)),
as.vector(c(10, 20, 18, 12, 8, 16, 12, 10, 4, 14))))
#Note: need to fix education - need years equivalents of categories (these are guesses)
workers %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
# explore certification thresholds ------------------------------------------
#look at distribution of just practical scores and certification
ggplot(workers, aes(x = practical_score, fill = certified)) +
geom_histogram(data =workers %>% filter(total_score!=0) , binwidth = 20, alpha=0.4)
#sectors - and job_level are going to determine certification.
#for job level 3 need 50% to be certified, for job level 4 need 70% to be certified
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#filter sectors that don't have many obs (<200)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 10, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
ggtitle(paste(sectorname))
}
#Uncomment if want to see sector distributions
sectors_3 <- filter(workers, job_level==3)
sectors_3 <- unique(sectors_3$subsectorid)
sectors_4 <- filter(workers, job_level==4)
sectors_4 <- unique(sectors_4$subsectorid)
#lapply(sectors_3, FUN=hister, DT=workers, level=3, score="total_score")
#lapply(sectors_4, FUN=hister, DT=workers, level=4, score="total_score")
#break down of total score, run as see fit
#lapply(sectors_3, FUN=hister, DT=workers, level=3, score="theory_score")
#lapply(sectors_3, FUN=hister, DT=workers, level=3, score="practical_score")
#lapply(sectors_4, FUN=hister, DT=workers, level=4, score="theory_score")
#lapply(sectors_4, FUN=hister, DT=workers, level=4, score="practical_score")
#Some of the sharp spikes in distributions are explained by looking at theory and practical separately
#Still, they exisit, but less concenred about manipulation due to Soma's explaination of process
#Most done by computers (theory score, combining scores and verification), and practical score which
#is done by hand could be maniupulated, but they won't know by how much, so RD assumption should still hold.
#NOTE: Most of Double threshold problem solved by split by job level above - some still exisits,
#but probably explained by transition from specific sector thresholds to uniform 50% / 70% threshold
# look at joint distributions to see bunching better
hister_joint <- function(sector, DT) {
data <- filter(DT, subsectorid==sector, total_score!=0)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector))
ggplot(data, aes(x = total_score)) +
geom_histogram(data =data, binwidth = 10, alpha=0.4, fill="red") +
ggtitle(paste(sectorname))
}
sectors <- unique(workers$subsectorid)
lapply(sectors, FUN=hister_joint, DT=workers) #Health Sector is concerning too - investigate with NSDC
---
title: "Initial NSDC Analysis - Updated"
author: "Greg Lane and Erin Kelley"
date: "January 22, 2018"
output:
pdf_document: default
html_document:
df_print: paged
---
```{r echo=F, message=FALSE, warning=FALSE, messages=F, paged.print=FALSE}
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisition/sample")
data <- read_excel("20171129_Sep2016Aug2017.xlsx")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
data <- read_excel("sample/20171129_Sep2016Aug2017.xlsx")
}
# clean data ----------------------------------------
names(data) %<>% tolower
#keep only vars that seem to be useful (for first pass)
workers <- data %>% select(candid, castecategory, educationattained, gender, grade, religion,
result, 'total theory marks', 'total practical marks',
totalmarkobtained, batchid, 'batch start date', 'batch end date',
'assessment date', trainerid, trainergender, centreid,
jobroleid, jobrole, jobrolelevel, jobroletype,
sectorid, sectorname, subsectorid, subsectorname, assessmentstatus,
statecode, district, 'placement status', cerified, monthlyincome, yearofbirth)
#rename & clean-up
workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
month = month(test_date),
year = year(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>% #Note: need to fix education, but need years equivalents
select(-c(caste, gender, religion, result))
educ_mat <- as.data.frame(cbind(unique(as.character(workers$eduction)),
as.vector(c(10, 20, 18, 12, 8, 16, 12, 10, 4, 14))))
#Note: need to fix education - need years equivalents of categories (these are guesses)
workers %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
```
## Distribution of Test Scores
A candidates final score is comprised of a score on a theory section and one on a practical section which are added together. In order to receive a certificate from a training institude, students enrolled in a program for a "Level 3" job (generally less skilled) must receive 50% of the total points, while those enrolled in a "Level 4" training require 70%. Below we plot the total score, the practical score, and the theory score for trainees in the Beauty Salon Program (Level 3). In each graph we plot the scores for the certified versus non-certified students. The certification threshold is clearly visible on the graph depicting total scores.
```{r, echo = F, messages = F, results='hide', fig.keep='all'}
#sectors - and job_level are going to determine certification.
#for job level 3 need 50% to be certified, for job level 4 need 70% to be certified
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#filter sectors that don't have many obs (<200)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister <- function(sector, DT, level, score) {
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 5, alpha=0.4) +
ggtitle(paste(sectorname))
}
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisition/sample")
data <- read_excel("20171129_Sep2016Aug2017.xlsx")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
data <- read_excel("sample/20171129_Sep2016Aug2017.xlsx")
}
names(data) %<>% tolower
#keep only vars that seem to be useful (for first pass)
workers <- data %>% select(candid, castecategory, educationattained, gender, grade, religion,
result, 'total theory marks', 'total practical marks',
totalmarkobtained, batchid, 'batch start date', 'batch end date',
'assessment date', trainerid, trainergender, centreid,
jobroleid, jobrole, jobrolelevel, jobroletype,
sectorid, sectorname, subsectorid, subsectorname, assessmentstatus,
statecode, district, 'placement status', cerified, monthlyincome, yearofbirth)
#rename & clean-up
workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
month = month(test_date),
year = year(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>% #Note: need to fix education, but need years equivalents
select(-c(caste, gender, religion, result))
educ_mat <- as.data.frame(cbind(unique(as.character(workers$eduction)),
as.vector(c(10, 20, 18, 12, 8, 16, 12, 10, 4, 14))))
workers %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
#sectors - and job_level are going to determine certification.
#for job level 3 need 50% to be certified, for job level 4 need 70% to be certified
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#filter sectors that don't have many obs (<200)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister <- function(sector, DT, level, score) {
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 5, alpha=0.4) +
ggtitle(paste(sectorname))
}
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
lapply(sector, FUN=hister, DT=workers, level=3, score="total_score")
View(sector)
beauty <- c(1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14)
lapply(beauty, FUN=hister, DT=workers, level=3, score="total_score")
beauty <- 49
lapply(beauty, FUN=hister, DT=workers, level=3, score="total_score")
View(data)
temp <- data %>% group_by(subsectorid) %>% summarise()
View(temp)
lapply(temp, FUN=hister, DT=workers, level=3, score="total_score")
View(temp)
View(temp)
beauty <- c(1, 3, 4, 5, 6)
lapply(beauty, FUN=hister, DT=workers, level=3, score="total_score")
# ---------------------------------------------------------------------------------
# Read and explore data sent by NSDC on November 29, 2017
# Data sent contains trainees from September 2016 until August 2017
# Created by Greg Nov 29, 2017
# Takes raw data (excel file) and cleans into usable dataframe and runs simple analysis
# ----------------------------------------------------------------------------------
# setup --------------------------------------------
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisiion/")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
}
# read data ----------------------------------------
data <- read_excel("sample/20171129_Sep2016Aug2017.xlsx")
# clean data ----------------------------------------
names(data) %<>% tolower
#keep only vars that seem to be useful (for first pass)
workers <- data %>% select(candid, castecategory, educationattained, gender, grade, religion,
result, 'total theory marks', 'total practical marks',
totalmarkobtained, batchid, 'batch start date', 'batch end date',
'assessment date', trainerid, trainergender, centreid,
jobroleid, jobrole, jobrolelevel, jobroletype,
sectorid, sectorname, subsectorid, subsectorname, assessmentstatus,
statecode, district, 'placement status', cerified, monthlyincome, yearofbirth)
#rename & clean-up
workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>%
select(-c(caste, gender, religion, result))
educ_mat <- as.data.frame(cbind(unique(as.character(workers$eduction)),
as.vector(c(10, 20, 18, 12, 8, 16, 12, 10, 4, 14))))
#Note: need to fix education - need years equivalents of categories (these are guesses)
workers %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
# explore certification thresholds ------------------------------------------
#look at distribution of just practical scores and certification
ggplot(workers, aes(x = practical_score, fill = certified)) +
geom_histogram(data =workers %>% filter(total_score!=0) , binwidth = 20, alpha=0.4)
#sectors - and job_level are going to determine certification.
#for job level 3 need 50% to be certified, for job level 4 need 70% to be certified
sector <- workers %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#filter sectors that don't have many obs (<200)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 10, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
ggtitle(paste(sectorname))
}
#Uncomment if want to see sector distributions
sectors_3 <- filter(workers, job_level==3)
sectors_3 <- unique(sectors_3$subsectorid)
sectors_4 <- filter(workers, job_level==4)
sectors_4 <- unique(sectors_4$subsectorid)
lapply(sectors_3, FUN=hister, DT=workers, level=3, score="total_score")
lapply(sectors_4, FUN=hister, DT=workers, level=4, score="total_score")
setwd("~/Website/gregorylane.github.io")
library(markdown)
rmarkdown::render_site()
