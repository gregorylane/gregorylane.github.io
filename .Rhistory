#write_csv2(loan_panel, "~/Dropbox/Berkeley/Bangladesh/Data Do Files/Clean for submission/replication/data/sim_panel_loans.csv")
#loan regs
temp <- loan_panel %>% group_by(branch_id, loan_id) %>%
summarise(branch_id = mean(branch_id, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year = min(year, na.rm=TRUE),
month = min(month, na.rm=TRUE)) %>%
mutate(credit_demean = credit_score - mean(credit_score, na.rm=TRUE))
temp %<>% mutate(profit = revenue - cost)
reg_profit <- felm(profit ~ elig_treat  | year + district | 0 | branch_id, data = temp)
summary(reg_profit)
#Heterogeneity treatment effect on profits (part of figure 1)
hetero <- temp %>%
mutate(bin = ntile(credit_score, 10))
col_data <- hetero %>% group_by(bin) %>% summarise(credit_score = mean(credit_score))
profit_reg <- function(x){
temp_reg <- felm(profit2 ~ elig_treat |
month + year  + district | 0 | branch_id, data = hetero %>% filter(bin==x))
beta <- as.numeric(temp_reg$coefficients[[1]])
se <- as.numeric(temp_reg$cse[[1]])
output <- cbind(beta, se)
return(output)
}
bins <- seq(1:10)
betas2 <- t(sapply(bins, profit_reg))
profit_reg <- function(x){
temp_reg <- felm(profit ~ elig_treat |
month + year  + district | 0 | branch_id, data = hetero %>% filter(bin==x))
beta <- as.numeric(temp_reg$coefficients[[1]])
se <- as.numeric(temp_reg$cse[[1]])
output <- cbind(beta, se)
return(output)
}
bins <- seq(1:10)
betas2 <- t(sapply(bins, profit_reg))
effects2 <- cbind(betas2, bins) %>% as.data.frame()
names(effects2) <- c("beta2", "se2", "bin")
col_data <-  merge(col_data, effects2, by="bin") %>%
mutate(upper = beta2 + 1.96*se2,
lower = beta2 - 1.96*se2)
hetero_treat_effect_profit <- ggplot(col_data, aes(x = credit_score, y=beta2)) +
geom_point() +
geom_line(aes(y=upper), linetype = 2) +
geom_line(aes(y=lower), linetype = 2) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3), se=FALSE) +
#geom_vline(xintercept = 77, colour = "gray") +
xlab('Credit Score') + ylab('Treatment Effect on Per Person Profits') +
scale_colour_manual(name="Eligible", values=c("#F8766D", "#00BFC4")) +
theme_bw()
hetero_treat_effect_profit
hetero_treat_effect_repay
names(loan_panel)
?round()
expected_profits <- loan_panel %>%
group_by(brac_id, month, year) %>% #summarise for each person
summarise(branch_id = mean(branch_id, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year_disb = mean(year_disb),
month_disb = mean(month_disb),
num_members = mean(num_members, na.rm=TRUE),
credit_score = round(mean(credit_score, na.rm=TRUE),digits=1)) %>%
ungroup() %>%
group_by(branch_id, month, year, credit_score) %>%
summarise(elig_treat = mean(elig_treat, na.rm=TRUE),
revenue = mean(revenue, na.rm=TRUE),
cost = mean(cost, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE)) %>%
ungroup() %>%
group_by(elig_treat, month, year, credit_score) %>%
summarise(revenue = mean(revenue, na.rm=TRUE),
cost = mean(cost, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE))
expected_profits %<>% mutate(exp_profit = revenue - cost,
exp_profit_percap = (revenue - cost)/num_members)
View(expected_profits)
head(loan_panel)
expected_profits <- loan_panel %>%
group_by(brac_id, month, year) %>% #summarise for each person
summarise(branch_id = mean(branch_id, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year_disb = mean(year_disb),
month_disb = mean(month_disb),
num_members = mean(num_members, na.rm=TRUE),
credit_score = round(mean(credit_score, na.rm=TRUE),digits=1))
View(expected_profits)
expected_profits <- loan_panel %>%
group_by(branch_id, brac_id, month, year) %>% #summarise for each person
summarise(branch_id = mean(branch_id, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year_disb = mean(year_disb),
month_disb = mean(month_disb),
num_members = mean(num_members, na.rm=TRUE),
credit_score = round(mean(credit_score, na.rm=TRUE),digits=1)) %>%
ungroup() %>%
group_by(branch_id, month, year, credit_score) %>%
summarise(elig_treat = mean(elig_treat, na.rm=TRUE),
revenue = mean(revenue, na.rm=TRUE),
cost = mean(cost, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE)) %>%
ungroup() %>%
group_by(elig_treat, month, year, credit_score) %>%
summarise(revenue = mean(revenue, na.rm=TRUE),
cost = mean(cost, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE))
expected_profits %<>% mutate(exp_profit = revenue - cost,
exp_profit_percap = (revenue - cost)/num_members)
View(expected_profits)
branch_id <- seq(1:200)
loan_id <- seq(1:1000)
repay_month <- seq(1:13)
month <- seq(1:12)
year <- c(2016, 2017)
brac_id <- seq(1:50)
loan_panel <- expand_grid(branch_id, loan_id, repay_month)
loans <- expand_grid(branch_id, loan_id)
#generate number of members for each branch
members <- round(runif(200, min=60, max=150))
members <- as.data.frame(bind_cols(branch_id, members))
names(members) <- c("branch_id", "num_members")
#generate loan outcomes
loans %<>% mutate(loan_amount = round(rnorm(nrow(loans), 20000, 5000))) %>%
mutate(loan_amount = ifelse(loan_amount <=10000, 10000, loan_amount)) %>%
mutate(month_disb = round(runif(nrow(loans), min=1, max=12)),
year_disb = round(runif(nrow(loans), min=2016, max=2017)),
sched_repay = round(loan_amount/12*1.26)) %>%
mutate(repay_month = 1,
brac_id = loan_id %% 50 +1)
loans <- left_join(loans, treats)
loans %<>% mutate(credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
#create random loan taking and filter to people who took loans (creates variation in # loans per branch)
loans %<>% mutate(prob_loan = 0.90 + 0.01*elig_treat) %>%
mutate(took_loan = rbinom(nrow(loans),1,prob_loan))
#merge in loan basic info with loan panel
loan_panel <- full_join(loan_panel, loans)
#carryforward loan info and remove obs that are randomly selected not to appear
loan_panel <- loan_panel %>% group_by(brac_id, loan_id) %>% na.locf()
loan_panel %<>% filter(took_loan==1)
loan_panel %<>% ungroup()
#generate loan repayment (use same code as above)
loan_panel %<>% mutate(prob_miss_pay = 0.16 - 0.008*elig_treat -0.011*credit_demean + 0.005*credit_demean*elig_treat) %>%
mutate(missed_pay = rbinom(nrow(loan_panel),1,prob_miss_pay))
loan_panel %<>% mutate(repaid = ifelse(missed_pay==0 & repay_month!=1, sched_repay + rnorm(1,mean=-50,sd=50), 0))
loan_panel %<>% mutate(month = month_disb + (repay_month -1)) %>%
mutate(year = ifelse(month > 12, year_disb+1, year_disb)) %>%
mutate(month = ifelse(month>12, month-12, month))
loan_panel %<>% left_join(members)
loan_panel %<>% mutate(loan_amount = ifelse(repay_month==1, loan_amount, NA))
summary(loan_panel)
######Full Loan Data (need panel)
set.seed(123456)
rm(data)
branch_id <- seq(1:200)
month <- seq(1:12)
year <- c(2016, 2017)
brac_id <- seq(1:50)
panel_data <- expand_grid(year, month, branch_id, brac_id)
panel_data <- left_join(panel_data, treats)
##### Dabi Loan take-up (look at pre period only)
panel_data %<>% mutate(prob_dabi = 0.062 + 0.007*elig_treat) %>%
mutate(dabi_taken = rbinom(nrow(panel_data),1,prob_dabi),
credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
summary(panel_data)
####### Profits
set.seed(123456)
rm(panel_data, effects2,betas2)
#Per loan profit - need to create loan panel (rather than per-person panel)
branch_id <- seq(1:200)
loan_id <- seq(1:1000)
repay_month <- seq(1:13)
month <- seq(1:12)
year <- c(2016, 2017)
brac_id <- seq(1:50)
loan_panel <- expand_grid(branch_id, loan_id, repay_month)
loans <- expand_grid(branch_id, loan_id)
#generate number of members for each branch
members <- round(runif(200, min=60, max=150))
members <- as.data.frame(bind_cols(branch_id, members))
names(members) <- c("branch_id", "num_members")
#generate loan outcomes
loans %<>% mutate(loan_amount = round(rnorm(nrow(loans), 20000, 5000))) %>%
mutate(loan_amount = ifelse(loan_amount <=10000, 10000, loan_amount)) %>%
mutate(month_disb = round(runif(nrow(loans), min=1, max=12)),
year_disb = round(runif(nrow(loans), min=2016, max=2017)),
sched_repay = round(loan_amount/12*1.26)) %>%
mutate(repay_month = 1,
brac_id = loan_id %% 50 +1)
loans <- left_join(loans, treats)
loans %<>% mutate(credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
#create random loan taking and filter to people who took loans (creates variation in # loans per branch)
loans %<>% mutate(prob_loan = 0.90 + 0.01*elig_treat) %>%
mutate(took_loan = rbinom(nrow(loans),1,prob_loan))
#merge in loan basic info with loan panel
loan_panel <- full_join(loan_panel, loans)
#carryforward loan info and remove obs that are randomly selected not to appear
loan_panel <- loan_panel %>% group_by(brac_id, loan_id) %>% na.locf()
loan_panel %<>% filter(took_loan==1)
loan_panel %<>% ungroup()
#generate loan repayment (use same code as above)
loan_panel %<>% mutate(prob_miss_pay = 0.16 - 0.008*elig_treat -0.011*credit_demean + 0.005*credit_demean*elig_treat) %>%
mutate(missed_pay = rbinom(nrow(loan_panel),1,prob_miss_pay))
loan_panel %<>% mutate(repaid = ifelse(missed_pay==0 & repay_month!=1, sched_repay + rnorm(1,mean=-50,sd=50), 0))
View(loan_panel)
loan_panel %<>% mutate(month = month_disb + (repay_month -1)) %>%
mutate(year = ifelse(month > 12, year_disb+1, year_disb)) %>%
mutate(month = ifelse(month>12, month-12, month))
loan_panel %<>% left_join(members)
loan_panel %<>% mutate(loan_amount = ifelse(repay_month==1, loan_amount, NA))
table(loan_panel$year, loan_panel$month)
########## Create Simulated Loan Data that then can be used to create mimic tables #####
rm(list = ls())
library(pacman)
p_load(data.table, tidyverse, magrittr, lfe,stargazer, pander, ri2, zoo) #ri2 is for randomization inference p-values
set.seed(123456)
el_eligible <- rep(1, 10000)
data <- as.data.frame(el_eligible)
data %<>% mutate(n = row_number()) %>%
mutate(branch_id = n %% 200 +1 )
#create basic vars
data %<>% group_by(branch_id) %>% mutate(branch_n = seq_along(branch_id)) %>% arrange(branch_id, n)
data %<>% mutate(elig_treat = branch_id %% 2,
year = ifelse(branch_n <=25, 2016, 2017),
district = sample(1:20,1,replace=T)) %>%
ungroup() %>%
mutate(credit_score = runif(length(n), min = 77, max = 86)) %>% #very small tail above this - but cut here
group_by(branch_id) %>%
mutate(flood_risk = sample(1:5,1, replace=T),
farming = rbinom(1,1,0.4)) %>% ungroup() %>%
mutate(error = rnorm(length(n), 0, 0.015))
#create good loan outcomes
data %<>% mutate(credit_score_demean = credit_score - mean(credit_score),
flood_risk_demean = flood_risk - mean(flood_risk),
farming_demean = farming - mean(farming)) %>%
mutate(prob = 0.13 - 0.02*elig_treat + 0.011*flood_risk_demean - 0.015*flood_risk_demean*elig_treat +
0.004*credit_score_demean - 0.003*credit_score_demean*elig_treat + 0.006*farming_demean - 0.007*farming_demean*elig_treat +
error) %>%
mutate(took_gl = rbinom(length(n), 1, prob ),
farm_treat = farming_demean * elig_treat,
flood_treat = flood_risk_demean * elig_treat,
credit_treat = credit_score_demean*elig_treat)
#Table 7
reg1 <- felm(took_gl ~ elig_treat  | year + district | 0 | branch_id, data = data)
reg2 <- felm(took_gl ~ elig_treat + farm_treat + farming_demean | year + district | 0 | branch_id,
data = data)
reg3 <- felm(took_gl ~ elig_treat + flood_treat + flood_risk_demean| year + district | 0 | branch_id,
data = data)
#Col 1 Table 8
reg_cr_gl <- felm(took_gl ~ elig_treat + credit_treat + credit_score_demean | year + district | 0 | branch_id,
data = data)
data %<>% dplyr::select(-error, -n, -prob, -farm_treat, -flood_treat, -credit_treat, -farming_demean, -flood_risk_demean, -credit_score_demean) %>% rename(brac_id = branch_n)
write_csv2(data, "~/Dropbox/Berkeley/Bangladesh/Data Do Files/Clean for submission/replication/data/sim_good_loan.csv")
treats <- dplyr::select(data, branch_id, brac_id, elig_treat, district, credit_score)
######Full Loan Data (need panel)
set.seed(123456)
rm(data)
branch_id <- seq(1:200)
month <- seq(1:12)
year <- c(2016, 2017)
brac_id <- seq(1:50)
panel_data <- expand_grid(year, month, branch_id, brac_id)
panel_data <- left_join(panel_data, treats)
##### Dabi Loan take-up (look at pre period only)
panel_data %<>% mutate(prob_dabi = 0.062 + 0.007*elig_treat) %>%
mutate(dabi_taken = rbinom(nrow(panel_data),1,prob_dabi),
credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
#A27
reg1 <- felm(dabi_taken ~ elig_treat | year + month + district | 0 | branch_id,
data = panel_data %>% filter(month <7 & month>3))
#Col 2 Table 8
reg_cr_dabi <- felm(dabi_taken ~ elig_treat + credit_treat + credit_demean | year + month + district | 0 | branch_id,
data = panel_data %>% filter(month <7 & month>3))
###### Missed Payments
floods <- expand_grid(branch_id, year) %>%
mutate(prob_flood = ifelse(year==2016, 0.4, 0.6))
floods %<>% mutate(active_branch = rbinom(nrow(floods),1,prob_flood))
floods %<>% mutate(ffwc_flood = ifelse(
((year==2016 & (branch_id==40 | branch_id==68 | branch_id==115 | branch_id==123 | branch_id==123)) |
(year==2017 & (branch_id==5 | branch_id==70 | branch_id==160 | branch_id==129))), 1, active_branch))
floods %<>% dplyr::select(-prob_flood)
#create flood lags
floods %<>% arrange(branch_id, year) %>%
mutate(last_year_flood = lag(active_branch, n=1),
last_year_ffwc_flood = lag(ffwc_flood, n=1)) %>%
mutate(last_year_flood = ifelse(is.na(last_year_flood), 0, last_year_flood),
last_year_ffwc_flood =ifelse(is.na(last_year_ffwc_flood), 0, last_year_ffwc_flood))
panel_data %<>% left_join(floods, by=c("year","branch_id"))
#create post flood indicators
panel_data %<>% mutate(post_flood = (month>7 & active_branch==1) | (month <4 & last_year_flood==1), #almost all floods occurred in late july
post_ffwc_flood = (month>7 & ffwc_flood==1) | (month<4 & last_year_ffwc_flood==1))
panel_data %<>% mutate(post_flood_treat = post_flood * elig_treat,
post_ffwc_treat = post_ffwc_flood * elig_treat)
panel_data %<>% mutate(prob_miss_pay = 0.16 + -0.011*credit_demean +
0.04*post_flood - 0.04*post_flood*elig_treat + 0.005*post_flood*credit_demean*elig_treat) %>%
mutate(missed_pay = rbinom(nrow(panel_data),1,prob_miss_pay))
#create savings for later
set.seed(123456)
panel_data %<>% mutate(made_trans = rbinom(nrow(panel_data),1,0.1),
error = rnorm(nrow(panel_data), 700, 3000)) %>%
mutate(savings_trans = made_trans*(error + 80*elig_treat - 300.34*post_flood +
320.25*post_flood*elig_treat + 40*(1-post_flood)))
# Table A26
reg1 <- felm(missed_pay ~ elig_treat + post_flood_treat + post_flood |
month + year + district | 0 | branch_id, data = panel_data)
# Table A8
reg2 <- felm(missed_pay ~ elig_treat + post_ffwc_treat + post_ffwc_flood |
month + year + district | 0 | branch_id, data = panel_data)
#Col 3 Table 8
reg_cr_miss <- felm(missed_pay ~  elig_treat + credit_treat + credit_demean  |
month  + year + district  | 0 | branch_id, data = panel_data)
#Heterogeneity figure for post flood treatment effect on missed payment (part of figure 1)
hetero <- panel_data %>%
mutate(bin = ntile(credit_score, 10))
col_data <- hetero %>% group_by(bin) %>% summarise(credit_score = mean(credit_score))
repay_reg2 <- function(x){
temp_reg <- felm(missed_pay ~ elig_treat + post_flood_treat + post_flood |
month + year  + district | 0 | branch_id, data = hetero %>% filter(bin==x))
beta <- as.numeric(temp_reg$coefficients[[2]])
se <- as.numeric(temp_reg$cse[[2]])
output <- cbind(beta, se)
return(output)
}
bins <- seq(1:10)
betas2 <- t(sapply(bins, repay_reg2))
effects2 <- cbind(betas2, bins) %>% as.data.frame()
names(effects2) <- c("beta2", "se2", "bin")
col_data <-  merge(col_data, effects2, by="bin") %>%
mutate(upper = beta2 + 1.96*se2,
lower = beta2 - 1.96*se2)
hetero_treat_effect_repay <- ggplot(col_data, aes(x = credit_score, y=beta2)) +
geom_point() +
geom_line(aes(y=upper), linetype = 2) +
geom_line(aes(y=lower), linetype = 2) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3), se=FALSE) +
xlab('Credit Score') + ylab('Treatment Effect on Probability of Missed Payment') +
scale_colour_manual(name="Eligible", values=c("#F8766D", "#00BFC4")) +
theme_bw()
hetero_treat_effect_repay
#Figure A.6
col_repay_data2 <- panel_data %>%
mutate(bin = ntile(credit_score, 10)) %>%
group_by(bin, elig_treat) %>%
summarise(missed_pay = mean(missed_pay, na.rm=TRUE),
credit_score= mean(credit_score, na.rm=TRUE))
levels_repay <- ggplot(panel_data, aes(x=credit_score, y=missed_pay, color=as.factor(elig_treat))) +
geom_smooth(se=FALSE) +
geom_point(data=col_repay_data2) +
xlab('Credit Score') + ylab('Probability Missed Payment') +
ylim(0, NA) +
theme_bw() +
scale_colour_manual(name="Treatment", values=c("#F8766D", "#00BFC4"))
levels_repay
rm(col_repay_data2, col_data, hetero, levels_repay, hetero_treat_effect_repay)
###### Savings
#Table A20
reg1 <- felm(savings_trans ~ elig_treat  | month + year + district | 0 | branch_id,
data = panel_data %>% filter(post_flood!=1 & month >8))
reg2 <- felm(savings_trans ~ elig_treat + post_flood_treat + post_flood  | month + year + district | 0 | branch_id,
data = panel_data)
#export panel data
panel_data %<>% dplyr::select(-prob_dabi,-prob_miss_pay,-error,-made_trans,-credit_demean,-credit_treat,
-post_flood_treat,-post_ffwc_treat)
write_csv2(panel_data, "~/Dropbox/Berkeley/Bangladesh/Data Do Files/Clean for submission/replication/data/sim_panel_ind.csv")
####### Profits
set.seed(123456)
rm(panel_data, effects2,betas2)
#Per loan profit - need to create loan panel (rather than per-person panel)
branch_id <- seq(1:200)
loan_id <- seq(1:1000)
repay_month <- seq(1:13)
month <- seq(1:12)
year <- c(2016, 2017)
brac_id <- seq(1:50)
loan_panel <- expand_grid(branch_id, loan_id, repay_month)
loans <- expand_grid(branch_id, loan_id)
#generate number of members for each branch
members <- round(runif(200, min=60, max=150))
members <- as.data.frame(bind_cols(branch_id, members))
names(members) <- c("branch_id", "num_members")
#generate loan outcomes
loans %<>% mutate(loan_amount = round(rnorm(nrow(loans), 20000, 5000))) %>%
mutate(loan_amount = ifelse(loan_amount <=10000, 10000, loan_amount)) %>%
mutate(month_disb = round(runif(nrow(loans), min=1, max=12)),
year_disb = round(runif(nrow(loans), min=2016, max=2017)),
sched_repay = round(loan_amount/12*1.26)) %>%
mutate(repay_month = 1,
brac_id = loan_id %% 50 +1)
loans <- left_join(loans, treats)
loans %<>% mutate(credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
#create random loan taking and filter to people who took loans (creates variation in # loans per branch)
loans %<>% mutate(prob_loan = 0.90 + 0.01*elig_treat) %>%
mutate(took_loan = rbinom(nrow(loans),1,prob_loan))
#merge in loan basic info with loan panel
loan_panel <- full_join(loan_panel, loans)
#carryforward loan info and remove obs that are randomly selected not to appear
loan_panel <- loan_panel %>% group_by(brac_id, loan_id) %>% na.locf()
loan_panel %<>% filter(took_loan==1)
loan_panel %<>% ungroup()
#generate loan repayment (use same code as above)
loan_panel %<>% mutate(prob_miss_pay = 0.16 - 0.008*elig_treat -0.011*credit_demean + 0.005*credit_demean*elig_treat) %>%
mutate(missed_pay = rbinom(nrow(loan_panel),1,prob_miss_pay))
loan_panel %<>% mutate(repaid = ifelse(missed_pay==0 & repay_month!=1, sched_repay + rnorm(1,mean=-50,sd=50), 0))
loan_panel %<>% mutate(month = month_disb + (repay_month -1)) %>%
mutate(year = ifelse(month > 12, year_disb+1, year_disb)) %>%
mutate(month = ifelse(month>12, month-12, month))
loan_panel %<>% left_join(members)
loan_panel %<>% mutate(loan_amount = ifelse(repay_month==1, loan_amount, NA))
### Run profit regs and re-package data for monthly / NPV regs
#calc profits
int_rate <- 0.005 #monthly cost of outstanding loans (6% annual interest)
loan_panel %<>% mutate(t = repay_month-1,
revenue = repaid/(1+int_rate)^t)
#re-name elig treat to just treatment
#write_csv2(loan_panel, "~/Dropbox/Berkeley/Bangladesh/Data Do Files/Clean for submission/replication/data/sim_panel_loans.csv")
#loan regs
temp <- loan_panel %>% group_by(branch_id, loan_id) %>%
summarise(branch_id = mean(branch_id, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year = min(year, na.rm=TRUE),
month = min(month, na.rm=TRUE)) %>%
mutate(credit_demean = credit_score - mean(credit_score, na.rm=TRUE))
temp %<>% mutate(profit = revenue - cost)
reg_profit <- felm(profit ~ elig_treat  | year + district | 0 | branch_id, data = temp)
summary(reg_profit)
#Heterogeneity treatment effect on profits (part of figure 1)
hetero <- temp %>%
mutate(bin = ntile(credit_score, 10))
col_data <- hetero %>% group_by(bin) %>% summarise(credit_score = mean(credit_score))
profit_reg <- function(x){
temp_reg <- felm(profit ~ elig_treat |
month + year  + district | 0 | branch_id, data = hetero %>% filter(bin==x))
beta <- as.numeric(temp_reg$coefficients[[1]])
se <- as.numeric(temp_reg$cse[[1]])
output <- cbind(beta, se)
return(output)
}
bins <- seq(1:10)
betas2 <- t(sapply(bins, profit_reg))
effects2 <- cbind(betas2, bins) %>% as.data.frame()
names(effects2) <- c("beta2", "se2", "bin")
col_data <-  merge(col_data, effects2, by="bin") %>%
mutate(upper = beta2 + 1.96*se2,
lower = beta2 - 1.96*se2)
hetero_treat_effect_profit <- ggplot(col_data, aes(x = credit_score, y=beta2)) +
geom_point() +
geom_line(aes(y=upper), linetype = 2) +
geom_line(aes(y=lower), linetype = 2) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3), se=FALSE) +
xlab('Credit Score') + ylab('Treatment Effect on Per Person Profits') +
scale_colour_manual(name="Eligible", values=c("#F8766D", "#00BFC4")) +
theme_bw()
hetero_treat_effect_profit
rm(temp)
#Monthly branch - use per-person panel data, create income streams, collapse to month
temp <- loan_panel %>% group_by(branch_id, loan_id, month, year) %>%
summarise(branch_id = mean(branch_id, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE)) %>%
ungroup() %>%
group_by(branch_id, month, year) %>%
summarise(elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = sum(cost, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE))
temp %<>% mutate(profit = revenue - cost)
reg_profit2 <- felm(profit ~ elig_treat |  month + year + district  | 0 | branch_id, data = temp)
summary(reg_profit2)
temp %<>% mutate(profit2 = profit / num_members)
reg_profit3 <- felm(profit2 ~ elig_treat  | month + year + district | 0 | branch_id, data = temp)
summary(reg_profit3)
#NPV - run code to estimate NPV paths for each credit-score, then merge back and then run regs
expected_profits <- loan_panel %>%
group_by(branch_id, brac_id, month, year) %>% #summarise for each person
summarise(branch_id = mean(branch_id, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year_disb = mean(year_disb),
month_disb = mean(month_disb),
num_members = mean(num_members, na.rm=TRUE),
credit_score = round(mean(credit_score, na.rm=TRUE),digits=1))
setwd("~/Library/CloudStorage/Dropbox/Mac/Documents/Website/gregorylane.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
