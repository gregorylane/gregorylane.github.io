geom_vline(xintercept = 0, colour = "red") +
ggtitle('Combined Centered Scores')
#plot combined distribution of running variable around threshold - this looks good with SELECTED sectors
ggplot(rd_data %>% filter(total_score!=0), aes(x = running)) +
geom_histogram(binwidth = 1, alpha=0.6) +
geom_vline(xintercept = 0, colour = "red") +
ggtitle('Combined Centered Scores')
#plot combined distribution of running variable around threshold - this looks good with SELECTED sectors
ggplot(rd_data %>% filter(total_score!=0), aes(x = running)) +
geom_histogram(binwidth = 0.5, alpha=0.6) +
geom_vline(xintercept = 0, colour = "red") +
ggtitle('Combined Centered Scores')
#plot outcome vars across threshold
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=monthlyincome, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-200,200) +
xlab('Centered Test Score') + ylab('Monthly Income - Conidtional on Employed (Rupees)') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
#plot outcome vars across threshold
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=monthlyincome, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Monthly Income - Conidtional on Employed (Rupees)') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=monthlyincome2, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-200,200) +
xlab('Centered Test Score') + ylab('Monthly Income (Rupees)') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=monthlyincome2, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Monthly Income (Rupees)') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=as.numeric(placement), colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-200,200) +
xlab('Centered Test Score') + ylab('Likelihood Employed') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=as.numeric(placement), colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-70,50) +
xlab('Centered Test Score') + ylab('Likelihood Employed') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
#placebo rd - looks good for education and STOBC
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = years_educ, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-200,200) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
#placebo rd - looks good for education and STOBC
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = years_educ, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-70,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(STOBC),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
names(rd_data)
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(hindu),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
View(rd_data)
#create data for scatter bins by collapseing by decile above and below cutoff
col_rd_data <- rd_data %>% group_by(above) %>% mutate(bin = ntile(running, 10)) %>%
ungroup() %>% group_by(above, bin) %>%
summarise(monthlyincome = mean(monthlyincome, na.rm=TRUE),
monthlyincome2 = mean(monthlyincome2, na.rm=TRUE),
placement = mean(placement),
running= mean(running, na.rm=TRUE),
years_educ = mean(years_educ, na.rm=TRUE),
STOBC = mean(STOBC, na.rm=TRUE),
hindu = mean(hindu, na.rm=TRUE))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(hindu),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
#create data for scatter bins by collapseing by decile above and below cutoff
col_rd_data <- rd_data %>% group_by(above) %>% mutate(bin = ntile(running, 10)) %>%
ungroup() %>% group_by(above, bin) %>%
summarise(monthlyincome = mean(monthlyincome, na.rm=TRUE),
monthlyincome2 = mean(monthlyincome2, na.rm=TRUE),
placement = mean(placement),
running= mean(running, na.rm=TRUE),
years_educ = mean(years_educ, na.rm=TRUE),
STOBC = mean(STOBC, na.rm=TRUE),
hindu = mean(hindu, na.rm=TRUE),
male = mean(male, na.rm=TRUE))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(male),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(hindu),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(STOBC),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('STOBC') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(hindu),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Hindu') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(male),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,50) +
xlab('Centered Test Score') + ylab('Male') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
#placebo rd - looks good for education and STOBC
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = years_educ, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('Years Educ') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(STOBC),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('STOBC') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(hindu),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('Hindu') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y = as.numeric(male),  colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('Male') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4"))
# Residualized RDs --------------------------------------------------------------------------------
#plot residualized data across threshold (to try and mimic regressions above)
reg3 <- felm(monthlyincome ~ years_educ | subsectorid + trainer_id | 0 | center_id, data = rd_data)
rd_data2 <- filter(rd_data, !is.na(monthlyincome)) # need to make separate data set b/c residuals don't exisit for missing data
rd_data2$res_income <- as.vector(reg3$residuals)
reg4 <- felm(as.numeric(placement) ~ years_educ | subsectorid + trainer_id | 0 | center_id, data = rd_data)
rd_data$res_place <- as.vector(reg4$residuals)
#need to recreate bins for points for each outcome
col_rd_data <- rd_data %>% group_by(above) %>% mutate(bin = ntile(running, 10)) %>%
ungroup() %>% group_by(above, bin) %>%
summarise(monthlyincome = mean(monthlyincome, na.rm=TRUE),
placement = mean(placement),
running= mean(running, na.rm=TRUE),
res_place=mean(res_place, na.rm=TRUE))
#need to recreate bins for points for each outcome
col_rd_data <- rd_data %>% group_by(above) %>% mutate(bin = ntile(running, 10)) %>%
ungroup() %>% group_by(above, bin) %>%
summarise(monthlyincome = mean(monthlyincome, na.rm=TRUE),
placement = mean(placement),
running= mean(running, na.rm=TRUE),
res_place=mean(res_place, na.rm=TRUE),
years_educ = mean(years_educ, na.rm=TRUE),
STOBC = mean(STOBC, na.rm=TRUE),
hindu = mean(hindu, na.rm=TRUE),
male = mean(male, na.rm=TRUE))
col_rd_data2 <- rd_data2 %>% group_by(above) %>% mutate(bin = ntile(running, 10)) %>%
ungroup() %>% group_by(above, bin) %>%
summarise(monthlyincome = mean(monthlyincome, na.rm=TRUE),
placement = mean(placement),
running= mean(running, na.rm=TRUE),
res_income=mean(res_income, na.rm=TRUE),
years_educ = mean(years_educ, na.rm=TRUE),
STOBC = mean(STOBC, na.rm=TRUE),
hindu = mean(hindu, na.rm=TRUE),
male = mean(male, na.rm=TRUE))
#placement residual RD
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=res_place, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-200,200) +
xlab('Centered Test Score') + ylab('Residual Likelihood Employed') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4")) +
labs(caption = "Controling for education, sector, and training center")
#placement residual RD
ggplot(rd_data %>% filter(total_score!=0), aes(x = running, y=res_place, colour = as.character(above))) +
geom_point(data=col_rd_data) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('Residual Likelihood Employed') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4")) +
labs(caption = "Controling for education, sector, and training center")
#Income resiudal RD
ggplot(rd_data2 %>% filter(total_score!=0), aes(x = running, y=res_income, colour = as.character(above))) +
geom_point(data=col_rd_data2) +
geom_smooth(method=lm, formula = y ~ splines::bs(x, 3)) +
geom_vline(xintercept = 0, colour = "gray") +
xlim(-50,30) +
xlab('Centered Test Score') + ylab('Residual Monthly Income') +
scale_colour_manual(name="Certified", values=c("#F8766D", "#00BFC4")) +
labs(caption = "Controling for education, sector, and training center")
rd_data  %<>% filter(!is.na(running), running !=-Inf)
#first stage
rdrobust(y = rd_data$certified , x = rd_data$running, cluster = rd_data$sectorid) %>% summary()
#job placement
rdrobust(y = rd_data$placement , x = rd_data$running, cluster = rd_data$sectorid,
covs = cbind(rd_data$years_educ, rd_data$sectorid, rd_data$trainer_id)) %>% summary()
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisition/")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
}
temp <- ymd_hms("2017-01-01 00:20:10") #have stupid ludbridate read so don't get error
rm(temp)
df <- read_excel("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/active_sample/20180808_Apr2018Dec2018.xlsx")
# clean data ----------------------------------------
names(df) %<>% tolower()
#keep only vars that seem to be useful (for first pass)
workers2 <- df  %>%
select(sector.id, sectorname, candid, jobroletype, jobrolelevel, partnertype,
centre.ownership, trainergender, assessed, employertype, result.are.approved.by.ssc,
totalpracticalmark, totaltheorymark, totalpercentage, cerified, placed,
result, religion, castecategory, educationattained, gender,
tc.state, tc.district, jobroleid, subsectorid, partnerid, centreid, trainerid,
batchid, yearofbirth, subdistrict, candidatedropout, grade,
sectorname, sscname, batch.start.date, batch.end.date, centresqftarea,
subsectorname, jobrole, statecode, district, monthlyincome)
#rename & clean-up
workers2 %<>% rename(sectorid = sector.id,
center_owner = centre.ownership,
id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = totaltheorymark,
practical_score = totalpracticalmark,
total_pct = totalpercentage,
start_date = batch.start.date,
end_date = batch.end.date,
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = placed,
certified = cerified,
tc_state = tc.state,
tc_district = tc.district) %>%
mutate(STOBC = caste %in% c('ST', 'OBC', 'ST'),
male = gender == 'Male', #there are transgender, but leave binary for now
grade = gsub(grade, pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date, format = "%m/%d/%Y"),
end_date = as.POSIXct(end_date, format = "%m/%d/%Y"),
trainer_male = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
approved = result.are.approved.by.ssc =="yes",
theory_score = as.numeric(theory_score),
practical_score = as.numeric(practical_score),
total_score = theory_score + practical_score,
monthlyincome = as.numeric(monthlyincome),
yearofbirth = as.numeric(yearofbirth),
self_employ = employertype == "Self Employed", #Ignore apprenticeships for now (only 1009)
wage_employ = employertype == "Wage Employment",
total_pct = as.numeric(total_pct),
job_level = as.numeric(job_level))
#drop not needed vars
workers2 %<>% select(-result.are.approved.by.ssc, -trainer_gender, -employertype, -result,
-religion, -caste, -gender, -sscname)
#Create education matrix to match levels of education to years of education
unique_eds <- unique(as.character(workers2$eduction))
educ_mat <- as.data.frame(cbind(as.vector(unique_eds),
as.vector(c(10, 12, 8, 20, 18, 16, 4, 12, 14, 14))))
#Note: need to fix education - need years equivalents of categories (these are guesses)
#merge in eduaction years into data
workers2 %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
#Add number of obs for each center
workers2 %<>% group_by(center_id) %>% mutate(count_center = n())
sectors <- workers2 %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister2 <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 2, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
labs(title = paste(sectorname), caption="Large Sample")
}
#plot bad distributions
hister2(sector==11 , DT=workers2, level==4, score="total_pct" )
#plot bad distributions
hister2(sector=11 , DT=workers2, level=4, score="total_pct" )
hister2(sector=61 , DT=workers2, level=4, score="total_pct" )
#plot bad distributions
hister2(sector=11 , DT=workers2, level=4, score="total_pct" )
hister2(sector=61 , DT=workers2, level=4, score="total_pct" )
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
library(rdrobust)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisition/")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
}
temp <- ymd_hms("2017-01-01 00:20:10") #have stupid ludbridate read so don't get error
rm(temp)
df <- read_excel("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/active_sample/20180808_Apr2018Dec2018.xlsx")
# clean data ----------------------------------------
names(df) %<>% tolower()
#keep only vars that seem to be useful (for first pass)
workers2 <- df  %>%
select(sector.id, sectorname, candid, jobroletype, jobrolelevel, partnertype,
centre.ownership, trainergender, assessed, employertype, result.are.approved.by.ssc,
totalpracticalmark, totaltheorymark, totalpercentage, cerified, placed,
result, religion, castecategory, educationattained, gender,
tc.state, tc.district, jobroleid, subsectorid, partnerid, centreid, trainerid,
batchid, yearofbirth, subdistrict, candidatedropout, grade,
sectorname, sscname, batch.start.date, batch.end.date, centresqftarea,
subsectorname, jobrole, statecode, district, monthlyincome)
#rename & clean-up
workers2 %<>% rename(sectorid = sector.id,
center_owner = centre.ownership,
id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = totaltheorymark,
practical_score = totalpracticalmark,
total_pct = totalpercentage,
start_date = batch.start.date,
end_date = batch.end.date,
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = placed,
certified = cerified,
tc_state = tc.state,
tc_district = tc.district) %>%
mutate(STOBC = caste %in% c('ST', 'OBC', 'ST'),
male = gender == 'Male', #there are transgender, but leave binary for now
grade = gsub(grade, pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date, format = "%m/%d/%Y"),
end_date = as.POSIXct(end_date, format = "%m/%d/%Y"),
trainer_male = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
approved = result.are.approved.by.ssc =="yes",
theory_score = as.numeric(theory_score),
practical_score = as.numeric(practical_score),
total_score = theory_score + practical_score,
monthlyincome = as.numeric(monthlyincome),
yearofbirth = as.numeric(yearofbirth),
self_employ = employertype == "Self Employed", #Ignore apprenticeships for now (only 1009)
wage_employ = employertype == "Wage Employment",
total_pct = as.numeric(total_pct),
job_level = as.numeric(job_level))
#drop not needed vars
workers2 %<>% select(-result.are.approved.by.ssc, -trainer_gender, -employertype, -result,
-religion, -caste, -gender, -sscname)
#Create education matrix to match levels of education to years of education
unique_eds <- unique(as.character(workers2$eduction))
educ_mat <- as.data.frame(cbind(as.vector(unique_eds),
as.vector(c(10, 12, 8, 20, 18, 16, 4, 12, 14, 14))))
#Note: need to fix education - need years equivalents of categories (these are guesses)
#merge in eduaction years into data
workers2 %<>% merge(y = educ_mat, by.x = "eduction", by.y = "V1", all=TRUE) %>%
select(-eduction) %>% rename(years_educ = V2) %>% mutate(years_educ = as.numeric(years_educ))
#Add number of obs for each center
workers2 %<>% group_by(center_id) %>% mutate(count_center = n())
sectors <- workers2 %>% group_by(sectorid, job_level, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister2 <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 2, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
labs(title = paste(sectorname), caption="Large Sample")
}
#plot bad distributions
(hister2(sector=11 , DT=workers2, level=4, score="total_pct" ))
(hister2(sector=61 , DT=workers2, level=4, score="total_pct" ))
#plot bad distributions
(hister2(sector=11 , DT=workers2, level=4, score="total_pct" ))
(hister2(sector=61 , DT=workers2, level=4, score="total_pct" ))
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister2 <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 1, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
labs(title = paste(sectorname), caption="Large Sample")
}
#plot bad distributions
(hister2(sector=11 , DT=workers2, level=4, score="total_pct" ))
(hister2(sector=61 , DT=workers2, level=4, score="total_pct" ))
?labs
#function to plot score histograms by subsector & job level (3 or 4) & score type (total, theory, or practical)
hister2 <- function(sector, DT, level, score) {
print(sector)
data <- filter(DT, subsectorid==sector, job_level==level)
sectorname = data$sectorname[1]
subsectorname = data$subsectorname[1]
if(sectorname!=subsectorname){sectorname <- paste(sectorname, '-' ,subsectorname)}
sectorname = paste0(sectorname, '-', as.character(sector), " - Level " , as.character(level))
plot_level_3 <- ggplot(data, aes_string(x = score, fill="certified")) +
geom_histogram(data =data %>% filter(total_score!=0) , binwidth = 1, alpha=0.4) +
#geom_histogram(data =data %>% filter(certified==FALSE, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
labs(title = paste(sectorname), caption="Large Sample") +
xlab('Percent Score')
}
#plot bad distributions
(hister2(sector=11 , DT=workers2, level=4, score="total_pct" ))
(hister2(sector=61 , DT=workers2, level=4, score="total_pct" ))
#plot good distributions
(hister2(sector=9 , DT=workers2, level=4, score="total_pct" ))
dev.new(width=5, height=4)
#plot bad distributions
(hister2(sector=11 , DT=workers2, level=4, score="total_pct" ))
(hister2(sector=61 , DT=workers2, level=4, score="total_pct" ))
setwd("~/Website/gregorylane.github.io")
rmarkdown::render_site()
