cDifDL <- cIDL - cUD
# Plotting
plot_data <- data.frame(piv, cUH, cUD, cIHH, cIDH, cIHL, cIDL, cDifU, cDifIH, cDifIL, cDifHH, cDifHL, cDifDH, cDifDL)
# Plot 1
ggplot(plot_data) +
geom_line(aes(x = piv, y = cIDH, color = "cIDH"), size = 2) +
geom_line(aes(x = piv, y = cIHH, color = "cIHH"), size = 2, linetype = "dashed") +
geom_line(aes(x = piv, y = cUD, color = "cUD"), size = 2) +
geom_line(aes(x = piv, y = cUH, color = "cUH"), size = 2, linetype = "dashed") +
labs(color = "Line", y = "c-values", x = "piv") +
theme_minimal()
# Plot 2
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifIH, color = "cDifIH"), size = 2) +
geom_line(aes(x = piv, y = cDifIL, color = "cDifIL"), size = 2) +
geom_line(aes(x = piv, y = cDifU, color = "cDifU"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 2) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 2) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 2, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 2, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
library(nleqslv)
library(ggplot2)
rm(list=ls())
FcUH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- pi * (yHH + w - c)^(1 - s) + (1 - pi) * (yHT + w - c)^(1 - s) + (yLH + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcUD <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- (yHD + w - c)^(1 - s) + pi * (yLD + w - c)^(1 - s) + (1 - pi) * (yLT + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcIH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHH <- yHH + w - Ci
cLH <- yLH + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- pi * (cHH - c)^(1 - s) + (1 - pi) * (cHT - c)^(1 - s) + (cLH - c + yI)^(1 - s) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
FcID <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHD <- yHD + w - Ci
cLD <- yLD + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- (cHD - c)^(1 - s) + (pi * (cLD - c + yI)^(1 - s) + (1 - pi) * (cLT - c + yI)^(1 - s)) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
# Parameters
Cp <- 0  # Cost of insurance
w <- 0.4
s <- 0.9
# Income
yHH <- 5   # Good state, HY seed
yHD <- 3   # Good state, DT seed
yHT <- 3   # Good state, Traditional seed
nsp <- 10
yLD <- 0.5  # Bad state, DT seed
yLH <- 0    # Bad state, HY seed
yLT <- 0    # Bad state, Traditional seed
yIH <- 0.5  # High insurance payout
yIL <- 0.25 # Low insurance payout
piv <- seq(0, 1, length.out = nsp)
c0 <- 0
cUH <- numeric(nsp)
cUD <- numeric(nsp)
cIHH <- numeric(nsp)
cIDH <- numeric(nsp)
cIHL <- numeric(nsp)
cIDL <- numeric(nsp)
for (i in 1:nsp) {
cUH[i] <- nleqslv(c0, FcUH, Par = c(yHH, yHT, yLH, yLT, piv[i], s, w))$x
cUD[i] <- nleqslv(c0, FcUD, Par = c(yHD, yHT, yLD, yLT, piv[i], s, w))$x
cIHH[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIH, piv[i], s, Cp, w))$x
cIDH[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIH, piv[i], s, Cp, w))$x
cIHL[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIL, piv[i], s, Cp, w))$x
cIDL[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIL, piv[i], s, Cp, w))$x
}
cDifU <- cUD - cUH
cDifIH <- cIDH - cIHH
cDifIL <- cIDL - cIHL
cDifHH <- cIHH - cUH
cDifHL <- cIHL - cUH
cDifDH <- cIDH - cUD
cDifDL <- cIDL - cUD
# Plotting
plot_data <- data.frame(piv, cUH, cUD, cIHH, cIDH, cIHL, cIDL, cDifU, cDifIH, cDifIL, cDifHH, cDifHL, cDifDH, cDifDL)
# Plot 1
ggplot(plot_data) +
geom_line(aes(x = piv, y = cIDH, color = "cIDH"), size = 2) +
geom_line(aes(x = piv, y = cIHH, color = "cIHH"), size = 2, linetype = "dashed") +
geom_line(aes(x = piv, y = cUD, color = "cUD"), size = 2) +
geom_line(aes(x = piv, y = cUH, color = "cUH"), size = 2, linetype = "dashed") +
labs(color = "Line", y = "c-values", x = "piv") +
theme_minimal()
# Plot 2
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifIH, color = "cDifIH"), size = 2) +
geom_line(aes(x = piv, y = cDifIL, color = "cDifIL"), size = 2) +
geom_line(aes(x = piv, y = cDifU, color = "cDifU"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 2) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 2) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 2, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 2, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
library(nleqslv)
library(ggplot2)
rm(list=ls())
FcUH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- pi * (yHH + w - c)^(1 - s) + (1 - pi) * (yHT + w - c)^(1 - s) + (yLH + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcUD <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- (yHD + w - c)^(1 - s) + pi * (yLD + w - c)^(1 - s) + (1 - pi) * (yLT + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcIH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHH <- yHH + w - Ci
cLH <- yLH + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- pi * (cHH - c)^(1 - s) + (1 - pi) * (cHT - c)^(1 - s) + (cLH - c + yI)^(1 - s) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
FcID <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHD <- yHD + w - Ci
cLD <- yLD + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- (cHD - c)^(1 - s) + (pi * (cLD - c + yI)^(1 - s) + (1 - pi) * (cLT - c + yI)^(1 - s)) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
# Parameters
Cp <- 0  # Cost of insurance
w <- 0.4
s <- 0.9
# Income
yHH <- 5   # Good state, HY seed
yHD <- 3   # Good state, DT seed
yHT <- 3   # Good state, Traditional seed
nsp <- 10
yLD <- 0.5  # Bad state, DT seed
yLH <- 0    # Bad state, HY seed
yLT <- 0    # Bad state, Traditional seed
yIH <- 0.5  # High insurance payout
yIL <- 0.25 # Low insurance payout
piv <- seq(0, 1, length.out = nsp)
c0 <- 0
cUH <- numeric(nsp)
cUD <- numeric(nsp)
cIHH <- numeric(nsp)
cIDH <- numeric(nsp)
cIHL <- numeric(nsp)
cIDL <- numeric(nsp)
for (i in 1:nsp) {
cUH[i] <- nleqslv(c0, FcUH, Par = c(yHH, yHT, yLH, yLT, piv[i], s, w))$x
cUD[i] <- nleqslv(c0, FcUD, Par = c(yHD, yHT, yLD, yLT, piv[i], s, w))$x
cIHH[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIH, piv[i], s, Cp, w))$x
cIDH[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIH, piv[i], s, Cp, w))$x
cIHL[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIL, piv[i], s, Cp, w))$x
cIDL[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIL, piv[i], s, Cp, w))$x
}
cDifU <- cUD - cUH
cDifIH <- cIDH - cIHH
cDifIL <- cIDL - cIHL
cDifHH <- cIHH - cUH
cDifHL <- cIHL - cUH
cDifDH <- cIDH - cUD
cDifDL <- cIDL - cUD
# Plotting
plot_data <- data.frame(piv, cUH, cUD, cIHH, cIDH, cIHL, cIDL, cDifU, cDifIH, cDifIL, cDifHH, cDifHL, cDifDH, cDifDL)
# Plot 1
ggplot(plot_data) +
geom_line(aes(x = piv, y = cIDH, color = "cIDH"), size = 1) +
geom_line(aes(x = piv, y = cIHH, color = "cIHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cUD, color = "cUD"), size = 1) +
geom_line(aes(x = piv, y = cUH, color = "cUH"), size = 1, linetype = "dashed") +
labs(color = "Line", y = "c-values", x = "piv") +
theme_minimal()
# Plot 2
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifIH, color = "cDifIH"), size = 1) +
geom_line(aes(x = piv, y = cDifIL, color = "cDifIL"), size = 1) +
geom_line(aes(x = piv, y = cDifU, color = "cDifU"), size = 1) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
scale_fill_discrete(name = "WTP Diff", labels = expression(\triangle, \triangle, \triangle, 1))
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
scale_fill_discrete(name = "WTP Diff", labels = expression(\triangle, \triangle, \triangle, 1)) +
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
scale_fill_discrete(name = "WTP Diff", labels = expression(triangle, triangle, triangle, 1)) +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(y = "Difference", x = "piv") +
scale_fill_discrete(name = "WTP Diff", labels = expression(triangle, triangle, triangle, 1)) +
theme_minimal()
View(plot_data)
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
#geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
#geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
View(plot_data)
write.csv(plot_data,"~/Library/CloudStorage/Box-Box/Insure_Adapt/code/plot_data.csv", row.names = FALSE)
write.csv(plot_data,"~/Library/CloudStorage/Box-Box/Insure_Adapt/code/5_model/plot_data.csv", row.names = FALSE)
library(nleqslv)
library(ggplot2)
rm(list=ls())
FcUH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- pi * (yHH + w - c)^(1 - s) + (1 - pi) * (yHT + w - c)^(1 - s) + (yLH + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcUD <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
pi <- Par[5]
s <- Par[6]
w <- Par[7]
F <- (yHD + w - c)^(1 - s) + pi * (yLD + w - c)^(1 - s) + (1 - pi) * (yLT + w - c)^(1 - s) - (yHT + w)^(1 - s) - (yLT + w)^(1 - s)
return(F)
}
FcIH <- function(c, Par) {
yHH <- Par[1]
yHT <- Par[2]
yLH <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHH <- yHH + w - Ci
cLH <- yLH + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- pi * (cHH - c)^(1 - s) + (1 - pi) * (cHT - c)^(1 - s) + (cLH - c + yI)^(1 - s) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
FcID <- function(c, Par) {
yHD <- Par[1]
yHT <- Par[2]
yLD <- Par[3]
yLT <- Par[4]
yI <- Par[5]
pi <- Par[6]
s <- Par[7]
Ci <- Par[8]
w <- Par[9]
cHD <- yHD + w - Ci
cLD <- yLD + w - Ci
cHT <- yHT + w - Ci
cLT <- yLT + w - Ci
F <- (cHD - c)^(1 - s) + (pi * (cLD - c + yI)^(1 - s) + (1 - pi) * (cLT - c + yI)^(1 - s)) - cHT^(1 - s) - (cLT + yI)^(1 - s)
return(F)
}
# Parameters
Cp <- 0  # Cost of insurance
w <- 0.4
s <- 0.9
# Income
yHH <- 5   # Good state, HY seed
yHD <- 3   # Good state, DT seed
yHT <- 3   # Good state, Traditional seed
nsp <- 10
yLD <- 0.5  # Bad state, DT seed
yLH <- 0    # Bad state, HY seed
yLT <- 0    # Bad state, Traditional seed
yIH <- 0.5  # High insurance payout
yIL <- 0.25 # Low insurance payout
piv <- seq(0, 1, length.out = nsp)
c0 <- 0
cUH <- numeric(nsp)
cUD <- numeric(nsp)
cIHH <- numeric(nsp)
cIDH <- numeric(nsp)
cIHL <- numeric(nsp)
cIDL <- numeric(nsp)
for (i in 1:nsp) {
cUH[i] <- nleqslv(c0, FcUH, Par = c(yHH, yHT, yLH, yLT, piv[i], s, w))$x
cUD[i] <- nleqslv(c0, FcUD, Par = c(yHD, yHT, yLD, yLT, piv[i], s, w))$x
cIHH[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIH, piv[i], s, Cp, w))$x
cIDH[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIH, piv[i], s, Cp, w))$x
cIHL[i] <- nleqslv(c0, FcIH, Par = c(yHH, yHT, yLH, yLT, yIL, piv[i], s, Cp, w))$x
cIDL[i] <- nleqslv(c0, FcID, Par = c(yHD, yHT, yLD, yLT, yIL, piv[i], s, Cp, w))$x
}
cDifU <- cUD - cUH
cDifIH <- cIDH - cIHH
cDifIL <- cIDL - cIHL
cDifHH <- cIHH - cUH
cDifHL <- cIHL - cUH
cDifDH <- cIDH - cUD
cDifDL <- cIDL - cUD
# Plotting
plot_data <- data.frame(piv, cUH, cUD, cIHH, cIDH, cIHL, cIDL, cDifU, cDifIH, cDifIL, cDifHH, cDifHL, cDifDH, cDifDL)
# Plot 1
ggplot(plot_data) +
geom_line(aes(x = piv, y = cIDH, color = "cIDH"), size = 1) +
geom_line(aes(x = piv, y = cIHH, color = "cIHH"), size = 1, linetype = "dashed") +
geom_line(aes(x = piv, y = cUD, color = "cUD"), size = 1) +
geom_line(aes(x = piv, y = cUH, color = "cUH"), size = 1, linetype = "dashed") +
labs(color = "Line", y = "c-values", x = "piv") +
theme_minimal()
# Plot 2
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifIH, color = "cDifIH"), size = 1) +
geom_line(aes(x = piv, y = cDifIL, color = "cDifIL"), size = 1) +
geom_line(aes(x = piv, y = cDifU, color = "cDifU"), size = 1) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
# Plot 3
ggplot(plot_data) +
geom_line(aes(x = piv, y = cDifDH, color = "cDifDH"), size = 1) +
geom_line(aes(x = piv, y = cDifDL, color = "cDifDL"), size = 1) +
#geom_line(aes(x = piv, y = cDifHH, color = "cDifHH"), size = 1, linetype = "dashed") +
#geom_line(aes(x = piv, y = cDifHL, color = "cDifHL"), size = 1, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
labs(color = "Line", y = "Difference", x = "piv") +
theme_minimal()
write.csv(plot_data,"~/Library/CloudStorage/Box-Box/Insure_Adapt/data/5_model/plot_data.csv", row.names = FALSE)
install.packages('geolocate')
install.packages('rgeolocate')
install.packages('tidygeocoder')
install_version("rgeolocate", repos = "https://cran.r-project.org/src/contrib/Archive/rgeolocate/")
require(devtools)
install_version("rgeolocate", repos = "https://cran.r-project.org/src/contrib/Archive/rgeolocate/")
install_version("rgeolocate", repos = "https://cran.r-project.org/src/contrib/Archive")
if(Sys.info()["user"] == "laneg") {
root <- "~/Dropbox/Projects/GenderBiases/Code/replication/"
}
root <- "~/Dropbox/Projects/GenderBiases/Code/replication_jole/"
install.packages('rgeolocate_1.4.2.tar.gz', lib=paste0(root, 'r_packages',repos = NULL))
install.packages('rgeolocate_1.4.2', lib=paste0(root, 'r_packages',repos = NULL))
install.packages('ip2location')
?ip2location
??ip2location
require(ip2location)
ip2location::open()
?open()
?get_all
?open
?get_all
get_all("8.8.8.8")
root <- "~/Dropbox/Projects/GenderBiases/Code/replication_jole/"
# Data path
path_rawdata <- paste0(root, "data/1_Raw/")
#fix where ip database is
ip_path <- paste0(path_rawdata, "chats/Location/IP2LOCATION-LITE-DB3.IPV6.BIN")
#run ip2location and bind with original data set
open(ip_path)
#fix where ip database is
ip_path <- paste0(path_rawdata, "chats/Location/GeoLite2-Country.mmdb")
#run ip2location and bind with original data set
open(ip_path)
ip_path
#fix where ip database is
ip_path <- paste0(path_rawdata, "chats/Location/IP2LOCATION-LITE-DB1/IP2LOCATION-LITE-DB1.MMDB")
#run ip2location and bind with original data set
open(ip_path)
master.R
# LOAD PACKAGES-----
library(pacman)
p_load(
readxl, data.table, dplyr, tidyverse, viridis, scales, knitr, kableExtra,
tidytext, tm, sentimentr, magrittr, googleLanguageR,
chron, textstem, cld2, countrycode, rgeolocate, foreign, httr
)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/rgeolocate/rgeolocate_1.4.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
help(maxmind)
require(rgeolocate)
?maxmind
packageurl <- "https://cran.r-project.org/src/contrib/Archive/rgeolocate/rgeolocate_1.4.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
require(rgeolocate)
help(maxmind)
?maxmind
setwd("~/Documents/Website/gregorylane.github.io")
rmarkdown::render_site()
setwd("~/Documents/Website/gregorylane.github.io")
rmarkdown::render_site()
setwd("~/Documents/Website/gregorylane.github.io")
rmarkdown::render_site()
