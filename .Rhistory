c("Month F.E.", "Yes", "Yes"),
c("Time Trend", "Yes", "Yes"),
c("Mean of Dependent Var", "56.43", "56.43")),
notes = "",
notes.align = "l")
cat(out_sales, sep = '\n', file=paste0(dir_save, 'sales_small.tex')) #write output
out_sales <- stargazer(reg_sales_small, reg_sales_small_lsize,
#out = '~/Dropbox/Berkeley/Bangladesh/Papers/tables/temp.tex',
out.header = FALSE,
label = "tbl:sales_small",
header = FALSE,
title = "Effect of Loan on Weekly Sales",
dep.var.caption = "",
dep.var.labels  = "Weekly Items Sold",
omit = c("loan_time", "loan_time2)"),
model.numbers = FALSE,
digits = 3,
covariate.labels = c("Loan Received", "Loan Size (Ths. Naira)"),
omit.stat = c("rsq", "ser" ,"f", "adj.rsq", "res.dev"),
add.lines = list(c("Year F.E.", "Yes", "Yes"),
c("Month F.E.", "Yes", "Yes"),
c("Time Trend", "Yes", "Yes"),
c("Mean of Dependent Var", "56.43", "56.43")),
notes = "",
notes.align = "l")
cat(out_sales, sep = '\n', file=paste0(dir_save, 'sales_small.tex')) #write output
############ V-LookUp Creation for Matatu V2 #####################
# Created by: Greg & Erin
# Date created: 8/3/2018
# Purpose: Create V LookUp file for surveys
##################################################################
#Edited on Oct 19th to randomize order of each treatment arm
#Echo printed 35 pure control and control for the first day of the pilot, so updated
#the key numbers so we don't duplicate
#Edited again on Oct 26th to add treatment keys to output
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, stringr)
#Notes: Keys will all be 5 digits.
# First digit must be 1, 5, or 9
# 1 = Pure Control, 5 = Control, 9 = Treatment
# Subsidy or not will just be random
#Create random order for treatment -----------------------------------------------------------------
set.seed(20181213) #Change the seed to todays date
# PARAMETERS TO CHANGE MAKE ------------------------------------------------------------------
batch_size <- 100 #number for new set of randomization
start <- 1236 #This is the max of each group were printed previously (get this from echo or previous csv)
# CREATING RANDOMIZATION ORDER ------------------------------------------------------------------
# create the randomization order
order <- data.frame(infoLabel = sample(c("PureControl", "Control", "Treatment"), size = batch_size, replace=TRUE)) %>%
# get order overal so can resort
mutate(seq_across = seq_along(infoLabel)) %>%
# get order within group
group_by(infoLabel) %>%
mutate(seq_within = seq_along(infoLabel)) %>%
ungroup()
# grab maximum number for each group in the random ordering
max_pc <- as.numeric(max(order %>% filter(infoLabel =='PureControl') %>% select(seq_within)))
max_c <- as.numeric(max(order %>% filter(infoLabel =='Control') %>% select(seq_within)))
max_t <- as.numeric(max(order %>% filter(infoLabel =='Treatment') %>% select(seq_within)))
# CREATING KEYS FOR PAMPHLETS ------------------------------------------------------------------
pc_keys <- seq(start + 10000, start + 10000 + max_pc -1 , 1)
c_keys <- seq(start + 50000, start + 50000 + max_c -1 , 1)
treat <- seq(start + 90000, start + 90000 + max_t -1, 1)
# CREATE SUBSIDY RANDOMIZATION -----------------------------------------------------------------
pure_control <- data.frame(key = c(pc_keys)) %>%
mutate(rnum =runif(n=max_pc)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
control <- data.frame(key = c(c_keys)) %>%
mutate(rnum =runif(n=max_c)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
treat <- data.frame(key = c(treat)) %>%
mutate(rnum =runif(n=max_t)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
# ADD LABELS -------------------------------------------------------------------------------
#Make sure to modify 'sub_sacco' to choose subsidized sacco
#NOTE: For Pilot we will subsidize Trippin (3) since they were most cooperative in giving matatus
# Use these numbers to match to names for consistency with survey programming:
# SUB_SACCO	NAME_SUB_SACCO
# 0 =	NairobiG
# 1 =	Transafaris
# 2 =	Sasaline
# 3 =	Trippin
# 4	= ClassicLuxuryShuttle
keys <- bind_rows(pure_control, control, treat) %>%
# adding labels
mutate(info = ifelse(key < 20000, 0, ifelse(
key < 60000 & key > 49999, 1, 2)),
infoLabel = ifelse(info == 0, "PureControl", ifelse(
info==1, "Control", "Treatment"))) %>%
group_by(info) %>%
mutate(seq_within = seq_along(info)) %>%
# Chooses sacco to subsidize
mutate(sub_sacco = 3,
name_sub_sacco = ifelse(sub_sacco==0 & subsidy==1, "NairobiG",
ifelse(sub_sacco==1 & subsidy==1, "Transafaris",
ifelse(sub_sacco==2 & subsidy==1, "Sasaline",
ifelse(sub_sacco==3 & subsidy==1, "Trippin",
ifelse(sub_sacco==4 & subsidy==1, "ClassicLuxuryShuttle", ""))))))
# CREATING FINAL RANDOMIZATION LIST ------------------------------------------------------------------
# rawest form
random_list_tmp <- left_join(order, keys, by = c('infoLabel', 'seq_within'))
# for output
random_list_1 <- random_list_tmp %>% select(-seq_across, -seq_within)
#write_csv(keys, "~/Dropbox/Matatu_project_David_Fred/rct_docs/surveys/look_up/look_up_pilot.csv")
#write_csv(random_list_1, paste0("~/Dropbox/Matatu_v3/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
write_csv(random_list_1, paste0("~/Dropbox/Research/Kenya/MatatuPassengers/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
############ V-LookUp Creation for Matatu V2 #####################
# Created by: Greg & Erin
# Date created: 8/3/2018
# Purpose: Create V LookUp file for surveys
##################################################################
#Edited on Oct 19th to randomize order of each treatment arm
#Echo printed 35 pure control and control for the first day of the pilot, so updated
#the key numbers so we don't duplicate
#Edited again on Oct 26th to add treatment keys to output
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, stringr)
#Notes: Keys will all be 5 digits.
# First digit must be 1, 5, or 9
# 1 = Pure Control, 5 = Control, 9 = Treatment
# Subsidy or not will just be random
#Create random order for treatment -----------------------------------------------------------------
set.seed(20181213) #Change the seed to todays date
# PARAMETERS TO CHANGE MAKE ------------------------------------------------------------------
batch_size <- 100 #number for new set of randomization
start <- 1236 #This is the max of each group were printed previously (get this from echo or previous csv)
# CREATING RANDOMIZATION ORDER ------------------------------------------------------------------
# create the randomization order
order <- data.frame(infoLabel = sample(c("PureControl", "Control", "Treatment"), size = batch_size, replace=TRUE)) %>%
# get order overal so can resort
mutate(seq_across = seq_along(infoLabel)) %>%
# get order within group
group_by(infoLabel) %>%
mutate(seq_within = seq_along(infoLabel)) %>%
ungroup()
# grab maximum number for each group in the random ordering
max_pc <- as.numeric(max(order %>% filter(infoLabel =='PureControl') %>% select(seq_within)))
max_c <- as.numeric(max(order %>% filter(infoLabel =='Control') %>% select(seq_within)))
max_t <- as.numeric(max(order %>% filter(infoLabel =='Treatment') %>% select(seq_within)))
# CREATING KEYS FOR PAMPHLETS ------------------------------------------------------------------
pc_keys <- seq(start + 10000, start + 10000 + max_pc -1 , 1)
c_keys <- seq(start + 50000, start + 50000 + max_c -1 , 1)
treat <- seq(start + 90000, start + 90000 + max_t -1, 1)
# CREATE SUBSIDY RANDOMIZATION -----------------------------------------------------------------
pure_control <- data.frame(key = c(pc_keys)) %>%
mutate(rnum =runif(n=max_pc)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
control <- data.frame(key = c(c_keys)) %>%
mutate(rnum =runif(n=max_c)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
treat <- data.frame(key = c(treat)) %>%
mutate(rnum =runif(n=max_t)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
# ADD LABELS -------------------------------------------------------------------------------
#Make sure to modify 'sub_sacco' to choose subsidized sacco
#NOTE: For Pilot we will subsidize Trippin (3) since they were most cooperative in giving matatus
# Use these numbers to match to names for consistency with survey programming:
# SUB_SACCO	NAME_SUB_SACCO
# 0 =	NairobiG
# 1 =	Transafaris
# 2 =	Sasaline
# 3 =	Trippin
# 4	= ClassicLuxuryShuttle
keys <- bind_rows(pure_control, control, treat) %>%
# adding labels
mutate(info = ifelse(key < 20000, 0, ifelse(
key < 60000 & key > 49999, 1, 2)),
infoLabel = ifelse(info == 0, "PureControl", ifelse(
info==1, "Control", "Treatment"))) %>%
group_by(info) %>%
mutate(seq_within = seq_along(info)) %>%
# Chooses sacco to subsidize
mutate(sub_sacco = 3,
name_sub_sacco = ifelse(sub_sacco==0 & subsidy==1, "NairobiG",
ifelse(sub_sacco==1 & subsidy==1, "Transafaris",
ifelse(sub_sacco==2 & subsidy==1, "Sasaline",
ifelse(sub_sacco==3 & subsidy==1, "Trippin",
ifelse(sub_sacco==4 & subsidy==1, "ClassicLuxuryShuttle", ""))))))
# CREATING FINAL RANDOMIZATION LIST ------------------------------------------------------------------
# rawest form
random_list_tmp <- left_join(order, keys, by = c('infoLabel', 'seq_within'))
# for output
random_list_1 <- random_list_tmp %>% select(-seq_across, -seq_within)
#write_csv(keys, "~/Dropbox/Matatu_project_David_Fred/rct_docs/surveys/look_up/look_up_pilot.csv")
#write_csv(random_list_1, paste0("~/Dropbox/Matatu_v3/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
write_csv(random_list_1, paste0("~/Dropbox/Matatu_v3/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
############ V-LookUp Creation for Matatu V2 #####################
# Created by: Greg & Erin
# Date created: 8/3/2018
# Purpose: Create V LookUp file for surveys
##################################################################
#Edited on Oct 19th to randomize order of each treatment arm
#Echo printed 35 pure control and control for the first day of the pilot, so updated
#the key numbers so we don't duplicate
#Edited again on Oct 26th to add treatment keys to output
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, stringr)
#Notes: Keys will all be 5 digits.
# First digit must be 1, 5, or 9
# 1 = Pure Control, 5 = Control, 9 = Treatment
# Subsidy or not will just be random
#Create random order for treatment -----------------------------------------------------------------
set.seed(20190103) #Change the seed to todays date
# PARAMETERS TO CHANGE MAKE ------------------------------------------------------------------
batch_size <- 100 #number for new set of randomization
start <- 1336 #This is the max of each group were printed previously (get this from echo or previous csv)
# CREATING RANDOMIZATION ORDER ------------------------------------------------------------------
# create the randomization order
order <- data.frame(infoLabel = sample(c("PureControl", "Control", "Treatment"), size = batch_size, replace=TRUE)) %>%
# get order overal so can resort
mutate(seq_across = seq_along(infoLabel)) %>%
# get order within group
group_by(infoLabel) %>%
mutate(seq_within = seq_along(infoLabel)) %>%
ungroup()
# grab maximum number for each group in the random ordering
max_pc <- as.numeric(max(order %>% filter(infoLabel =='PureControl') %>% select(seq_within)))
max_c <- as.numeric(max(order %>% filter(infoLabel =='Control') %>% select(seq_within)))
max_t <- as.numeric(max(order %>% filter(infoLabel =='Treatment') %>% select(seq_within)))
# CREATING KEYS FOR PAMPHLETS ------------------------------------------------------------------
pc_keys <- seq(start + 10000, start + 10000 + max_pc -1 , 1)
c_keys <- seq(start + 50000, start + 50000 + max_c -1 , 1)
treat <- seq(start + 90000, start + 90000 + max_t -1, 1)
# CREATE SUBSIDY RANDOMIZATION -----------------------------------------------------------------
pure_control <- data.frame(key = c(pc_keys)) %>%
mutate(rnum =runif(n=max_pc)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
control <- data.frame(key = c(c_keys)) %>%
mutate(rnum =runif(n=max_c)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
treat <- data.frame(key = c(treat)) %>%
mutate(rnum =runif(n=max_t)) %>%
arrange(rnum) %>%
mutate(seq = seq_along(rnum),
subsidy = as.numeric(seq <= max_pc/2)) %>%
arrange(key) %>%
select(-rnum, -seq)
# ADD LABELS -------------------------------------------------------------------------------
#Make sure to modify 'sub_sacco' to choose subsidized sacco
#NOTE: For Pilot we will subsidize Trippin (3) since they were most cooperative in giving matatus
# Use these numbers to match to names for consistency with survey programming:
# SUB_SACCO	NAME_SUB_SACCO
# 0 =	NairobiG
# 1 =	Transafaris
# 2 =	Sasaline
# 3 =	Trippin
# 4	= ClassicLuxuryShuttle
keys <- bind_rows(pure_control, control, treat) %>%
# adding labels
mutate(info = ifelse(key < 20000, 0, ifelse(
key < 60000 & key > 49999, 1, 2)),
infoLabel = ifelse(info == 0, "PureControl", ifelse(
info==1, "Control", "Treatment"))) %>%
group_by(info) %>%
mutate(seq_within = seq_along(info)) %>%
# Chooses sacco to subsidize
mutate(sub_sacco = 3,
name_sub_sacco = ifelse(sub_sacco==0 & subsidy==1, "NairobiG",
ifelse(sub_sacco==1 & subsidy==1, "Transafaris",
ifelse(sub_sacco==2 & subsidy==1, "Sasaline",
ifelse(sub_sacco==3 & subsidy==1, "Trippin",
ifelse(sub_sacco==4 & subsidy==1, "ClassicLuxuryShuttle", ""))))))
# CREATING FINAL RANDOMIZATION LIST ------------------------------------------------------------------
# rawest form
random_list_tmp <- left_join(order, keys, by = c('infoLabel', 'seq_within'))
# for output
random_list_1 <- random_list_tmp %>% select(-seq_across, -seq_within)
#write_csv(keys, "~/Dropbox/Matatu_project_David_Fred/rct_docs/surveys/look_up/look_up_pilot.csv")
#write_csv(random_list_1, paste0("~/Dropbox/Matatu_v3/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
write_csv(random_list_1, paste0("~/Dropbox/Matatu_v3/rct_docs/surveys/look_up/" , "pilot_look_up_", start , "_" , start+batch_size, ".csv"))
setwd("~/Website/gregorylane.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/Website/gregorylane.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
librray(rmarkdown)
libray(rmarkdown)
library(rmarkdown)
render_site()
rm(list = ls())
library(pacman)
p_load(data.table, tidyverse, magrittr, ggplot2, FixedPoint, fitdistrplus, stats, boot, gmm, plotly)
#Using real surplus data
surplus <- read.csv("~/Dropbox/Matatu/model/greg/sims/surplus.csv") %>%
mutate(surplus = ifelse(surplus < 0, NA, surplus)) %>%
mutate(surplus = ifelse(surplus < 10, surplus*100, surplus)) %>%
mutate(surplus = surplus/100-7) %>% #subtract off the subsistence constraint
mutate(surplus = ifelse(surplus < 0, NA, surplus)) %>%
na.omit
boot_opt <- function(x, work_cost, rep_cost) {
exp_cost <- rep_cost # in data, 490 in control group, expected repairs costs at e* r* which are fixed by mean, std, of Y and independent of T, U
#delta <- delta #discount factor
work_cost <- work_cost # cost of effort + risk for driver which are independent of T, U - note: average G_e seems to be around 250, so seems reasonable that total cost is around that?
#h <- fir_cost #rehiring / firing cost for owner - put this at about 2 weeks of lost revenue
#outside_option <- out_opt/(1-delta) #driver outside option as the estimated subsistence value
sample <- sample_n(surplus, size=9504, replace=T)
fg <- fitdist(sample$surplus, distr="logis")
#lot(fg)
#Choose paramters
mean <- as.numeric(fg$estimate[1]) #pull mean from estimated distribution
std <- as.numeric(fg$estimate[2]) #pul std from estimated distribution
#Starting choice of target and value of contract for fixed point algorithm
g_u <- 50 #need some fixed value of U for input in recursive problem
max_target = delta*g_u #calc max_target possible given the first guess of U
g_target <- min(40, max_target) #choose target, but don't allow choice above max transfer compatible T
g_v <- 40 #need some first guess fo V
g_welfare <- g_u + g_v
#Write everything as a function of the target, initial U choice and primitives
output <- function(inputs){
target <-inputs[1]
u_fix <-inputs[3]
v_fix <- inputs[4]
alpha <- (target - mean)/std #how many std. devs the target is above / below mean
intercept <- max(1 - (target)/(delta*u_fix),0) # define p_0
#Formulas for expected value of y from a normal distribution found in Greene Chapter 19
exp_y_below <- mean(surplus$surplus[surplus <= target], na.rm=T)
exp_y_above <- mean(surplus$surplus[surplus >= target], na.rm=T)
#Formula of expected continutation probability
continue_prob = plogis(target, mean, std)*(intercept + (1/(delta*u_fix))*exp_y_below)+(1-plogis(target, mean, std))
U <- ((1-plogis(target, mean, std))*(exp_y_above - target)-work_cost+
(1 - continue_prob)*delta*outside_option)/(1-delta)
#Re-Calc max target possible to limit search function
max_target2 = delta*U
V <-  (target - plogis(target, mean, std)*(1+(v_fix/U))*(target - exp_y_below) - exp_cost -
(1 - continue_prob)*delta*h)/(1 - delta) #Calc Value of contract for owner
#find target that maximizes the owner payoff given all the above
xmin <- qlogis(0.1, mean, std) #Note, for some parameter values, too low a target search leads to NAs which breaks system, change this if optim fails
xmax <- qlogis(0.6, mean, std)
own_payoff <- function(target, u) {
payoff <- delta*V + target - exp_cost - plogis(target, mean, std)*(1+V/U)*(target - exp_y_below)
}
tar <- optimize(own_payoff, interval=c(xmin, xmax), maximum=TRUE, u=U)$maximum
#Calculate owner payoff, driver payoff, and calc max target that driver will agree to (i.e. see if optimal owner target is outside of participation constraint)
own_payoff <- optimize(own_payoff, interval=c(xmin, max_target2), maximum=TRUE, u=U)$objective
dri_payoff <- delta*U - tar + mean - work_cost
min_agree_tar <- delta*U -dri_payoff + mean - work_cost
#Recalc target and payoffs now that see if at boundry
tar = min(tar, min_agree_tar)
own_payoff <- delta*V + tar - exp_cost - plogis(tar, mean, std)*(1+V/U)*(tar - exp_y_below)
profits <- tar - exp_cost - plogis(tar, mean, std)*(tar - exp_y_below)
exp_salary <- (1-plogis(target, mean, std))*(exp_y_above-target)
exp_income <- tar - plogis(tar, mean, std)*(tar - exp_y_below)
welfare <- U + V
return(c(tar, max_target2, U, V, continue_prob, profits, intercept, exp_salary, exp_income, welfare))
}
inputs <- c(g_target, 40, g_u, g_v, 0.9, 10, 0.9, 8, 10, g_welfare) #Give inputs for target, max target, Driver U, owner_payoff,  driver_payoff, and continue prob
values <- FixedPoint(Function = output, Inputs = inputs, Method = "Anderson", MaxIter = 10000)
end_target <- values$FixedPoint[1]
max_target_chosen <- round(values$FixedPoint[1],0.1) == round(values$FixedPoint[2], 0.1)
end_U <- values$FixedPoint[3]
end_V <- values$FixedPoint[4]
end_ep <- values$FixedPoint[5]
end_exp_profits <- values$FixedPoint[6]
end_intercept <- values$FixedPoint[7]
end_exp_salary <- values$FixedPoint[8]
end_exp_income <- values$FixedPoint[9]
end_welfare <- values$FixedPoint[10]
results <- c(end_target, end_U, end_V, end_ep, end_exp_profits, end_intercept, end_exp_salary, end_exp_income, end_welfare)
return(results)
}
grapher<- function(data, x_var, y_vars) {
data %<>% filter(names %in% y_vars )
plot <- ggplot(data=data) +
geom_line(aes(x=eval(as.symbol(x_var)), y=estimate, color=names)) +
geom_line(aes(x=eval(as.symbol(x_var)), y=upper, color=names), linetype="dashed") +
geom_line(aes(x=eval(as.symbol(x_var)), y=lower, linetype="dashed", color=names), linetype="dashed") +
ggtitle(paste("Vary", x_var)) + ylab("Outcomes") + xlab(x_var)
#ggsave(paste0("vary_", x_var,"_", y_vars[1], ".png"), path = "~/Dropbox/Matatu/model/greg/sims/plots", device="png")
return(plot)
}
###### #Vary work costs ######
vary_work_costs <- function(costs) {
outputs <- as.data.frame(t(sapply(1:100, boot_opt, work_cost=work_cost, rep_cost=exp_cost )))
names(outputs) <- c("target", "U", "V", "ep", "exp_profit", "intercept", "exp_salary", "exp_income", "welfare")
results<-data.frame(estimate=c(mean(outputs$target, na.rm=T), mean(outputs$U, na.rm=T), mean(outputs$V, na.rm=T), mean(outputs$ep, na.rm=T), mean(outputs$exp_profit, na.rm=T), mean(outputs$exp_salary, na.rm=T), mean(outputs$welfare, na.rm=T)),
stderr = c(sd(outputs$target, na.rm=T),sd(outputs$U, na.rm=T), sd(outputs$V, na.rm=T), sd(outputs$ep, na.rm=T), sd(outputs$exp_profit, na.rm=T), sd(outputs$exp_salary, na.rm=T), sd(outputs$welfare, na.rm=T)))
results$names <- c("target", "U", "V","ep","exp_profit", "exp_salary", "welfare")
results %<>%  mutate(upper = estimate+1.96*stderr,
lower = estimate-1.96*stderr,
work_cost = work_cost)
results2 <- pivot_wider(results, id_cols=work_cost,
names_from=names,
values_from=c(estimate, stderr, upper, lower))
return(results)
}
#Choose parameters for estimation
exp_cost <- 5 # expected repairs costs at e* r* which are fixed by mean, std, of Y and independent of T, U
delta <- 0.97 #discount factor
#work_cost <- 8 # cost of effort + risk for driver which are independent of T, U - note: average G_e seems to be around 250, so seems reasonable that total cost is around that?
h <- 200 #rehiring / firing cost for owner - put this at about 2 weeks of lost revenue
outside_option <- 8.1/(1-delta) #"Value of job is 269.13"
dt_work_cost <- bind_rows(lapply(1:7, vary_work_costs))
###### #Vary work costs ######
vary_work_costs <- function(costs) {
work_costs <- costs
outputs <- as.data.frame(t(sapply(1:100, boot_opt, work_cost=work_cost, rep_cost=exp_cost )))
names(outputs) <- c("target", "U", "V", "ep", "exp_profit", "intercept", "exp_salary", "exp_income", "welfare")
results<-data.frame(estimate=c(mean(outputs$target, na.rm=T), mean(outputs$U, na.rm=T), mean(outputs$V, na.rm=T), mean(outputs$ep, na.rm=T), mean(outputs$exp_profit, na.rm=T), mean(outputs$exp_salary, na.rm=T), mean(outputs$welfare, na.rm=T)),
stderr = c(sd(outputs$target, na.rm=T),sd(outputs$U, na.rm=T), sd(outputs$V, na.rm=T), sd(outputs$ep, na.rm=T), sd(outputs$exp_profit, na.rm=T), sd(outputs$exp_salary, na.rm=T), sd(outputs$welfare, na.rm=T)))
results$names <- c("target", "U", "V","ep","exp_profit", "exp_salary", "welfare")
results %<>%  mutate(upper = estimate+1.96*stderr,
lower = estimate-1.96*stderr,
work_cost = work_cost)
results2 <- pivot_wider(results, id_cols=work_cost,
names_from=names,
values_from=c(estimate, stderr, upper, lower))
return(results)
}
#Choose parameters for estimation
exp_cost <- 5 # expected repairs costs at e* r* which are fixed by mean, std, of Y and independent of T, U
delta <- 0.97 #discount factor
#work_cost <- 8 # cost of effort + risk for driver which are independent of T, U - note: average G_e seems to be around 250, so seems reasonable that total cost is around that?
h <- 200 #rehiring / firing cost for owner - put this at about 2 weeks of lost revenue
outside_option <- 8.1/(1-delta) #"Value of job is 269.13"
dt_work_cost <- bind_rows(lapply(1:7, vary_work_costs))
###### #Vary work costs ######
vary_work_costs <- function(costs) {
work_costs <- costs
outputs <- as.data.frame(t(sapply(1:100, boot_opt, work_cost=work_cost, rep_cost=exp_cost )))
names(outputs) <- c("target", "U", "V", "ep", "exp_profit", "intercept", "exp_salary", "exp_income", "welfare")
results<-data.frame(estimate=c(mean(outputs$target, na.rm=T), mean(outputs$U, na.rm=T), mean(outputs$V, na.rm=T), mean(outputs$ep, na.rm=T), mean(outputs$exp_profit, na.rm=T), mean(outputs$exp_salary, na.rm=T), mean(outputs$welfare, na.rm=T)),
stderr = c(sd(outputs$target, na.rm=T),sd(outputs$U, na.rm=T), sd(outputs$V, na.rm=T), sd(outputs$ep, na.rm=T), sd(outputs$exp_profit, na.rm=T), sd(outputs$exp_salary, na.rm=T), sd(outputs$welfare, na.rm=T)))
results$names <- c("target", "U", "V","ep","exp_profit", "exp_salary", "welfare")
results %<>%  mutate(upper = estimate+1.96*stderr,
lower = estimate-1.96*stderr,
work_cost = work_cost)
results2 <- pivot_wider(results, id_cols=work_cost,
names_from=names,
values_from=c(estimate, stderr, upper, lower))
return(results)
}
#Choose parameters for estimation
exp_cost <- 5 # expected repairs costs at e* r* which are fixed by mean, std, of Y and independent of T, U
delta <- 0.97 #discount factor
#work_cost <- 8 # cost of effort + risk for driver which are independent of T, U - note: average G_e seems to be around 250, so seems reasonable that total cost is around that?
h <- 200 #rehiring / firing cost for owner - put this at about 2 weeks of lost revenue
outside_option <- 8.1/(1-delta) #"Value of job is 269.13"
dt_work_cost <- bind_rows(lapply(1:7, vary_work_costs))
###### #Vary work costs ######
vary_work_costs <- function(costs) {
work_cost <- costs
outputs <- as.data.frame(t(sapply(1:100, boot_opt, work_cost=work_cost, rep_cost=exp_cost )))
names(outputs) <- c("target", "U", "V", "ep", "exp_profit", "intercept", "exp_salary", "exp_income", "welfare")
results<-data.frame(estimate=c(mean(outputs$target, na.rm=T), mean(outputs$U, na.rm=T), mean(outputs$V, na.rm=T), mean(outputs$ep, na.rm=T), mean(outputs$exp_profit, na.rm=T), mean(outputs$exp_salary, na.rm=T), mean(outputs$welfare, na.rm=T)),
stderr = c(sd(outputs$target, na.rm=T),sd(outputs$U, na.rm=T), sd(outputs$V, na.rm=T), sd(outputs$ep, na.rm=T), sd(outputs$exp_profit, na.rm=T), sd(outputs$exp_salary, na.rm=T), sd(outputs$welfare, na.rm=T)))
results$names <- c("target", "U", "V","ep","exp_profit", "exp_salary", "welfare")
results %<>%  mutate(upper = estimate+1.96*stderr,
lower = estimate-1.96*stderr,
work_cost = work_cost)
results2 <- pivot_wider(results, id_cols=work_cost,
names_from=names,
values_from=c(estimate, stderr, upper, lower))
return(results)
}
#Choose parameters for estimation
exp_cost <- 5 # expected repairs costs at e* r* which are fixed by mean, std, of Y and independent of T, U
delta <- 0.97 #discount factor
#work_cost <- 8 # cost of effort + risk for driver which are independent of T, U - note: average G_e seems to be around 250, so seems reasonable that total cost is around that?
h <- 200 #rehiring / firing cost for owner - put this at about 2 weeks of lost revenue
outside_option <- 8.1/(1-delta) #"Value of job is 269.13"
dt_work_cost <- bind_rows(lapply(1:7, vary_work_costs))
#change delta
delta <- 0.9
outside_option <- 8.1/(1-delta) #"Value of job is 269.13"
dt_work_cost2 <- bind_rows(lapply(1:7, vary_work_costs)) %>% mutate(delta="low")
temp <- bind_rows(dt_work_cost, dt_work_cost2) %>% mutate(delta=ifelse(is.na(delta), "high", delta))
ggplot(data=temp %>% filter(names=="target")) +
geom_line(aes(x=work_cost, y=estimate, color=delta)) +
geom_line(aes(x=work_cost, y=upper, color=delta), linetype="dashed") +
geom_line(aes(x=work_cost, y=lower, linetype="dashed", color=delta), linetype="dashed") +
ggtitle(paste("Vary Work Cost")) + ylab("Target") + xlab("Work Cost")
#change delta
delta <- 0.9
outside_option <- 8.1 #"Value of job is 269.13"
dt_work_cost2 <- bind_rows(lapply(1:7, vary_work_costs)) %>% mutate(delta="low")
View(dt_work_cost2)
