#therefore, need to be careful when expand grid. Limit analysis only to start of RCT
#when I know I have more full data.  Also need to be careful with post period & good loan
#data b/c treatment branches will be effected there differentially.
loan_disburse <-rbind(loan_disburse_2016, loan_disburse_2017) %>%
unique(by=c("hchyid", "orgno", "orgmemno", "loanno", "disbdate", "principalamt"))
rm(loan_disburse_2016, loan_disburse_2017)
#focus only on normal dabi loans
loan_disburse %<>% filter(projectcode==15, productno!=36 | 121 | 139 | 134 | 159)
#read in list of ALL borrowers
active_members <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/member_all_200_jan_2017.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
active_members2 <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/2017/con_loan_member.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
active_members2b <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/2017/con_loan_orgmember.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
#clean up member lists
active_members %<>% select(-membername, -memsexid, -memsignature, -operator, -nationalidno,
-dateofbirth, -phoneno, -phonereference, -walletno, -mempicture)
#These Data are problematic, so use other data set above...
# names(active_members2) %<>% tolower()
# active_members2 %<>% select(-membername, -memsexid, -memsignature, -mempicture, -operator, -nationalidno,
#                             -dateofbirth, -phoneno, -phonereference, -walletno, -status)
#
# names(active_members2b) %<>% tolower()
# active_members2b %<>% select(-orgjoindate, -operator) %>%
#   mutate(hchyid = as.numeric(hchyid))
#
# active_members2c <- merge(active_members2, active_members2b, by=c('hchyid', 'memberno'))
# active_members2c %<>% mutate(renewupto = as.Date(renewupto),
#                              year_active = year(renewupto))
#
#merge in loan disbursals to member list
disburse <- merge(active_members, loan_disburse, by=c('hchyid', 'orgno', 'orgmemno'),
all.x=TRUE, all.y=TRUE)
#create grid of member ids and dates, use only active members (status equals 0)
disburse <- disburse %>% filter(status==0) %>%
complete(nesting(hchyid, orgno, orgmemno), year_disb, month_disb)
#function should create rows of year-month for each person in data set
disburse %<>% mutate(loan_taken = as.numeric(!is.na(disbdate)))
#Read in eligibility lists and flood activation
eligible_2016 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2016/full_eligible_list.csv")
eligible2_2016 <- read_xlsx("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2016/image_branch_borr.xlsx") #Second list for branches that sent images
eligible_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
flood_active_2016 <- read.dta13("~/Dropbox/Berkeley/Bangladesh/Data Modifed/Activation/active_branches_2016.dta")
flood_active_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Trigger Data/flood_tracking_2017.csv")
flood_active2_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Trigger Data/flood_activation_2017.csv")
# Reformat and Combine Eligibility Data sets -----------------------------------------------
eligible_2016 <- bind_rows(eligible_2016 %>% rename(orgno = Org..No.., orgmemno = Member.No.)  %>%
select(hchyid, orgno, orgmemno) %>%
mutate(eligible=1),
eligible2_2016 %>% select(hchyid, orgno, orgmemno)) %>%
mutate(eligible=1,
year=2016)
eligible_2017 <- eligible_2017 %>% select(-X1) %>% rename(orgno=vo_id, orgmemno = brac_id) %>%
select(hchyid, orgno, orgmemno) %>%
mutate(eligible=1,
year=2017)
eligible <- bind_rows(eligible_2016, eligible_2017)
rm(eligible_2016, eligible_2017, eligible2_2016)
#treatment status
flood_active_2016 %<>% select(hchyid, active_branch, active_date, treatment) %>%
rename(flooded = active_branch) %>%
mutate(year=2016)
names(flood_active2_2017) %<>% tolower()
flood_active2_2017 <- flood_active2_2017 %>%
rename(hchyid=code, active_date2 = `date of trigger activation (2017)`) %>%
select(hchyid, active_date2) %>%
mutate(active_date2 = mdy(active_date2))
names(flood_active_2017) %<>% tolower()
flood_active_2017 <- flood_active_2017 %>%
rename(hchyid = `branch id`, flooded = `confirmed flood?`,
active_date = `date of confirmed flood`, gauge = `gauge name`) %>%
mutate(notes = ifelse(flooded=='Confirmed (only 16% affected)', 'only 16% affected', notes),
flooded = ifelse(flooded == 'Confirmed (only 16% affected)', 'Confirmed', flooded),
flooded = as.numeric(!is.na(flooded)),
year=2017,
active_date = mdy(active_date)) %>%
select(hchyid, treatment, flooded, year, notes, active_date) %>%
merge(flood_active2_2017, by="hchyid", all.x=TRUE, all.y=TRUE) %>%
as.data.table()
flood_active_2017[!is.na(active_date2), active_date:=active_date2]
flood_active_2017 %<>% as.data.frame() %>% select(-active_date2)
flood_active <- bind_rows(flood_active_2016, flood_active_2017)
flood_active <- flood_active %>% rename(note_flood = notes)
rm(flood_active_2016, flood_active_2017, flood_active2_2017)
treatment <- flood_active %>% select(hchyid, treatment, year)
rm(flood_active)
#districts
districts_2017 <- fread("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/branch_districts_2017.csv") %>%
group_by(hchyid) %>% summarise(district = first(district)) %>% mutate(year = 2017)
districts_2016 <- fread("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/branch_districts_2016.csv") %>%
rename(district = sur_area_distname) %>% group_by(hchyid) %>% summarise(district = first(district)) %>%
mutate(year = 2016)
districts <- rbind(districts_2016, districts_2017)
rm(districts, districts_2016, districts_2017)
#merge eligibility with loan disbursals
disburse <- full_join(disburse, eligible,
by = c('hchyid', 'orgno', 'orgmemno', 'year_disb'='year'))
disburse %<>% mutate(eligible = ifelse(is.na(eligible), 0, eligible),
loan_taken = ifelse(is.na(loan_taken), 0, loan_taken))
#merge in treatment
disburse <- full_join(disburse, treatment, by = c('hchyid', 'year_disb' = 'year') )
#merge in districts
disburse <- left_join(disburse, districts, by = c('hchyid', 'year_disb' = 'year') )
#select period when effect should be in play - want to limit to these months only
#because can't use other periods as "normal" because of issues with EL availability to take
#and spillovers to other periods, and also the issue with missing pre-period data for branches...
disburse %<>% mutate(active_rct = as.numeric(year_disb >= 2016 &
month_disb>4 & month_disb <9),
active_treat = active_rct * treatment)
#save disburse data set for use in output files
save(list=c("disburse"), file="~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/dabi_disbursals")
#regressions
reg1 <- felm(loan_taken ~ treatment |
0 | 0 | hchyid,
data = disburse %>% filter(eligible==1, active_rct==1))
summary(reg1)
############ New Loan Analysis #####################
# Created by: Greg
# Date created: 5/26/2018
# Purpose: Analsyis of loan disbusement data for changes in loan taking due to Emergency Loan eligibility
# Inputs: Loan disbursal dataset
######################################
rm(list = ls())
library(pacman)
p_load(data.table, dplyr, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr, lfe, psych,
stargazer, pander)
# Lubridate Adds easy date sytax, padr for date manipulation
# psych add winsor command
#have stupid ludbridate read so don't get error
temp <- ymd_hms("2017-01-01 00:20:10")
rm(temp)
dir_data <- "~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/"
load(paste0(dir_data, "Loan_disburse_2016"))
loan_disburse_2016 <- loan_disburse
load(paste0(dir_data, "Loan_disburse_2017"))
loan_disburse_2017 <- loan_disburse
rm(loan_disburse)
# load(paste0(dir_data, "reference_ids_2016"))
# id_2016 <- id_reference
# load(paste0(dir_data, "reference_ids_2017"))
# id_2017 <- id_reference
#NOTE: Are missing older data for some branches - happen to be more treatment than control,
#therefore, need to be careful when expand grid. Limit analysis only to start of RCT
#when I know I have more full data.  Also need to be careful with post period & good loan
#data b/c treatment branches will be effected there differentially.
loan_disburse <-rbind(loan_disburse_2016, loan_disburse_2017) %>%
unique(by=c("hchyid", "orgno", "orgmemno", "loanno", "disbdate", "principalamt"))
rm(loan_disburse_2016, loan_disburse_2017)
#focus only on normal dabi loans
loan_disburse %<>% filter(projectcode==15, productno!=36 | 121 | 139 | 134 | 159)
#read in list of ALL borrowers
active_members <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/member_all_200_jan_2017.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
active_members2 <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/2017/con_loan_member.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
active_members2b <- read.csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT 200 Branch Data/2017/con_loan_orgmember.csv", stringsAsFactors = F) #This file has escape char, need to use read.csv to input
#clean up member lists
active_members %<>% select(-membername, -memsexid, -memsignature, -operator, -nationalidno,
-dateofbirth, -phoneno, -phonereference, -walletno, -mempicture)
#These Data are problematic, so use other data set above...
# names(active_members2) %<>% tolower()
# active_members2 %<>% select(-membername, -memsexid, -memsignature, -mempicture, -operator, -nationalidno,
#                             -dateofbirth, -phoneno, -phonereference, -walletno, -status)
#
# names(active_members2b) %<>% tolower()
# active_members2b %<>% select(-orgjoindate, -operator) %>%
#   mutate(hchyid = as.numeric(hchyid))
#
# active_members2c <- merge(active_members2, active_members2b, by=c('hchyid', 'memberno'))
# active_members2c %<>% mutate(renewupto = as.Date(renewupto),
#                              year_active = year(renewupto))
#
#merge in loan disbursals to member list
disburse <- merge(active_members, loan_disburse, by=c('hchyid', 'orgno', 'orgmemno'),
all.x=TRUE, all.y=TRUE)
#create grid of member ids and dates, use only active members (status equals 0)
disburse <- disburse %>% filter(status==0) %>%
complete(nesting(hchyid, orgno, orgmemno), year_disb, month_disb)
#function should create rows of year-month for each person in data set
disburse %<>% mutate(loan_taken = as.numeric(!is.na(disbdate)))
#Read in eligibility lists and flood activation
eligible_2016 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2016/full_eligible_list.csv")
eligible2_2016 <- read_xlsx("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2016/image_branch_borr.xlsx") #Second list for branches that sent images
eligible_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
flood_active_2016 <- read.dta13("~/Dropbox/Berkeley/Bangladesh/Data Modifed/Activation/active_branches_2016.dta")
flood_active_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Trigger Data/flood_tracking_2017.csv")
flood_active2_2017 <- read_csv("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Trigger Data/flood_activation_2017.csv")
# Reformat and Combine Eligibility Data sets -----------------------------------------------
eligible_2016 <- bind_rows(eligible_2016 %>% rename(orgno = Org..No.., orgmemno = Member.No.)  %>%
select(hchyid, orgno, orgmemno) %>%
mutate(eligible=1),
eligible2_2016 %>% select(hchyid, orgno, orgmemno)) %>%
mutate(eligible=1,
year=2016)
eligible_2017 <- eligible_2017 %>% select(-X1) %>% rename(orgno=vo_id, orgmemno = brac_id) %>%
select(hchyid, orgno, orgmemno) %>%
mutate(eligible=1,
year=2017)
eligible <- bind_rows(eligible_2016, eligible_2017)
rm(eligible_2016, eligible_2017, eligible2_2016)
#treatment status
flood_active_2016 %<>% select(hchyid, active_branch, active_date, treatment) %>%
rename(flooded = active_branch) %>%
mutate(year=2016)
names(flood_active2_2017) %<>% tolower()
flood_active2_2017 <- flood_active2_2017 %>%
rename(hchyid=code, active_date2 = `date of trigger activation (2017)`) %>%
select(hchyid, active_date2) %>%
mutate(active_date2 = mdy(active_date2))
names(flood_active_2017) %<>% tolower()
flood_active_2017 <- flood_active_2017 %>%
rename(hchyid = `branch id`, flooded = `confirmed flood?`,
active_date = `date of confirmed flood`, gauge = `gauge name`) %>%
mutate(notes = ifelse(flooded=='Confirmed (only 16% affected)', 'only 16% affected', notes),
flooded = ifelse(flooded == 'Confirmed (only 16% affected)', 'Confirmed', flooded),
flooded = as.numeric(!is.na(flooded)),
year=2017,
active_date = mdy(active_date)) %>%
select(hchyid, treatment, flooded, year, notes, active_date) %>%
merge(flood_active2_2017, by="hchyid", all.x=TRUE, all.y=TRUE) %>%
as.data.table()
flood_active_2017[!is.na(active_date2), active_date:=active_date2]
flood_active_2017 %<>% as.data.frame() %>% select(-active_date2)
flood_active <- bind_rows(flood_active_2016, flood_active_2017)
flood_active <- flood_active %>% rename(note_flood = notes)
rm(flood_active_2016, flood_active_2017, flood_active2_2017)
treatment <- flood_active %>% select(hchyid, treatment, year)
rm(flood_active)
#districts
districts_2017 <- fread("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/branch_districts_2017.csv") %>%
group_by(hchyid) %>% summarise(district = first(district)) %>% mutate(year = 2017)
districts_2016 <- fread("~/Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/branch_districts_2016.csv") %>%
rename(district = sur_area_distname) %>% group_by(hchyid) %>% summarise(district = first(district)) %>%
mutate(year = 2016)
districts <- rbind(districts_2016, districts_2017)
rm(districts_2016, districts_2017)
#merge eligibility with loan disbursals
disburse <- full_join(disburse, eligible,
by = c('hchyid', 'orgno', 'orgmemno', 'year_disb'='year'))
disburse %<>% mutate(eligible = ifelse(is.na(eligible), 0, eligible),
loan_taken = ifelse(is.na(loan_taken), 0, loan_taken))
#merge in treatment
disburse <- full_join(disburse, treatment, by = c('hchyid', 'year_disb' = 'year') )
#merge in districts
disburse <- left_join(disburse, districts, by = c('hchyid', 'year_disb' = 'year') )
disburse %<>% mutate(active_rct = as.numeric(year_disb >= 2016 &
month_disb>4 & month_disb <9),
active_treat = active_rct * treatment)
#save disburse data set for use in output files
save(list=c("disburse"), file="~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/dabi_disbursals")
#regressions
reg1 <- felm(loan_taken ~ treatment |
year_disb + month_disb + district | 0 | hchyid,
data = disburse %>% filter(eligible==1, active_rct==1))
summary(reg1)
#look at number of loans taken
temp <- disburse %>% group_by(treatment, active_rct) %>% summarise(loan_taken = mean(loan_taken))
summary(temp)
View(temp)
#look at number of loans taken
temp <- disburse %>% group_by(treatment) %>% summarise(loan_taken = mean(loan_taken))
#look at number of loans taken
temp <- disburse %>% group_by(treatment) %>% summarise(loan_taken = mean(loan_taken))
summary(temp)
View(temp)
#look at number of loans taken
temp <- disburse %>% group_by(treatment) %>% summarise(loan_taken = mean(loan_taken, na.rm=TRUE))
#look at number of loans taken
temp <- disburse %>% group_by(treatment) %>% summarise(loan_taken = mean(loan_taken, na.rm=TRUE))
summary(temp)
View(temp)
#look at number of loans taken
temp <- disburse %>% group_by(treatment, active_rct) %>% summarise(loan_taken = mean(loan_taken, na.rm=TRUE))
View(temp)
#regressions
reg1 <- felm(loan_taken ~ treatment |
0 | 0 | hchyid,
data = disburse %>% filter(eligible==1, active_rct==1))
summary(reg1)
#look at number of loans taken
temp <- disburse %>% filter(eligible==1, active_rct==1)  %>%
group_by(treatment) %>% summarise(loan_taken = mean(loan_taken, na.rm=TRUE))
View(temp)
#number of borrowers
temp <- disburse %>% filter(eligible==1, active_rct==1)  %>%
group_by(hchyid, orgno, orgmemno) %>% summarise(loan_taken = mean(loan_taken, na.rm=TRUE))
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr) # Lubridate Adds easy date sytax, padr for date manipulation
endline2 <- read_excel("Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Survey Data/Endline2_data_13-2-18_format.xlsx")
temp <- names(endline2)
temp2 <- str_split(temp, "/")
names <- lapply(temp2, function(x){
list <- unlist(x)
output <- list[length(list)]})
names <- unlist(names)
names(endline2) <- names
fwrite(endline2, "Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Survey Data/endline2_fixnames.csv", na="")
######## Fix var names on import of Endline 2 data #######
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr) # Lubridate Adds easy date sytax, padr for date manipulation
endline2 <- read_excel("Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Survey Data/Endline2_data_13-2-18_format.xlsx")
temp <- names(endline2)
temp2 <- str_split(temp, "/")
names <- lapply(temp2, function(x){
list <- unlist(x)
output <- list[length(list)]})
names <- unlist(names)
names(endline2) <- names
fwrite(endline2, "Dropbox/Berkeley/Bangladesh/Data Raw/RCT Data/Survey Data/endline2_fixnames.csv", na="")
names(X) <- "running var"
X <- 50
names(X) <- "running var"
#Load in loan repayment data for analysis
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr, lfe, psych,
stargazer, pander)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr, lfe, psych,
stargazer, pander)
temp <- ymd_hms("2017-01-01 00:20:10")
rm(temp)
dir_data <- "~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/"
dir_save <- '~/Dropbox/Berkeley/Bangladesh/Papers/tables/'
dir_save_fig <- '~/Dropbox/Berkeley/Bangladesh/Papers/figures/'
load(paste0(dir_data, "dabi_disbursals"))
# setup ----------------------------------------------------------------------
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr, lfe, psych,
stargazer, pander)
# Lubridate Adds easy date sytax, padr for date manipulation
# psych add winsor command
#have stupid ludbridate read so don't get error
temp <- ymd_hms("2017-01-01 00:20:10")
rm(temp)
dir_data <- "~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/"
# read data
load(paste0(dir_data, "analysis_loan_data.RData"))
head(loans)
# winsor vars for regressions
loans %<>% mutate(savbalan = winsor(savbalan, trim=0.01), #winsorize the savings data
tranamount = winsor(tranamount, trim=0.01))
# make treatment interactions
loans %<>% mutate(act_treatment_post = act_treatment * post_period,
act_treatment_post_flood = act_treatment * post_period * flooded,
distress_treat = flood_distress * act_treatment_post,
flood_distress2 = ifelse(month <9 & year==2017, 0, flood_distress)) #create other flood distress base var for reg that has zeros in pre-period
#Make indicators for emergency loand and other loans owned by EL borrowers
loans %<>% group_by(id_person) %>%
mutate(em_loan = productno==134 | productno==159,
em_loan_other_loan = max(em_loan) ==1 & flooded==1 & em_loan!=1)
names(loans)
temp <- loan %>% group_by(post_period, treatment, flooded) %>%
mutate(amt_behind = expected_paid - actual_paid) %>%
summarise(miss_pay_behind = mean(miss_pay_behind),
amt_behind = mean(amt_behind),
pct_behind = mean(pct_behind))
temp <- loans %>% group_by(post_period, treatment, flooded) %>%
mutate(amt_behind = expected_paid - actual_paid) %>%
summarise(miss_pay_behind = mean(miss_pay_behind),
amt_behind = mean(amt_behind),
pct_behind = mean(pct_behind))
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(amt_behind = expected_paid - actual_paid) %>%
summarise(miss_pay_behind = mean(miss_pay_behind),
amt_behind = mean(amt_behind),
pct_behind = mean(pct_behind))
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(amt_behind = expected_paid - actual_paid) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = mean(amt_behind, na.rm=TRUE),
pct_behind = mean(pct_behind, na.rm=TRUE))
View(temp)
# setup ----------------------------------------------------------------------
rm(list = ls())
library(pacman)
p_load(data.table, foreign, tidyverse, magrittr, lubridate, readstata13, readxl, stringr, lfe, psych,
stargazer, pander)
# Lubridate Adds easy date sytax, padr for date manipulation
# psych add winsor command
#have stupid ludbridate read so don't get error
temp <- ymd_hms("2017-01-01 00:20:10")
rm(temp)
dir_data <- "~/Dropbox/Berkeley/Bangladesh/Data Modifed/Loan Data/"
# read data
load(paste0(dir_data, "analysis_loan_data.RData"))
# winsor vars for regressions
loans %<>% mutate(savbalan = winsor(savbalan, trim=0.01), #winsorize the savings data
tranamount = winsor(tranamount, trim=0.01))
# make treatment interactions
loans %<>% mutate(act_treatment_post = act_treatment * post_period,
act_treatment_post_flood = act_treatment * post_period * flooded,
distress_treat = flood_distress * act_treatment_post,
flood_distress2 = ifelse(month <9 & year==2017, 0, flood_distress)) #create other flood distress base var for reg that has zeros in pre-period
#Make indicators for emergency loand and other loans owned by EL borrowers
loans %<>% group_by(id_person) %>%
mutate(em_loan = productno==134 | productno==159,
em_loan_other_loan = max(em_loan) ==1 & flooded==1 & em_loan!=1)
#Add interaction of these loans with other flood indicators
loans %<>% mutate(act_treat_post_flood_em_loan = em_loan * act_treatment_post_flood,
act_treat_post_flood_oth_loan = em_loan_other_loan * act_treatment_post_flood)
# summary of bins for clusters
temp <- loans %>% group_by(treatment, post_flooded, hchyid, year) %>%
summarise(flood_distress = mean(flood_distress, na.rm=TRUE)) %>%
group_by(treatment, post_flooded, year) %>%
summarise(flood_distress = mean(flood_distress, na.rm=TRUE),
number_branch = n()) %>%
arrange(year, treatment) %>%
mutate(flood_distress = round(flood_distress, digits=1)) %>%
rename(Flooded = post_flooded,
Treatment = treatment,
"Flood Distress" = flood_distress,
Branches = number_branch)
stargazer(temp, summary=FALSE)
# summary table of repayment rates (just to see means)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(amt_behind = expected_paid - actual_paid) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = mean(amt_behind, na.rm=TRUE),
pct_behind = mean(pct_behind, na.rm=TRUE))
names(loans)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(new_behind = targetamt - totcolc) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = sum(new_behind, na.rm=TRUE),
expected_paid = sum(targetamt, na.rm=TRUE))
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(new_behind = ifelse(expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = sum(new_behind, na.rm=TRUE),
expected_paid = sum(targetamt, na.rm=TRUE))
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = sum(new_behind, na.rm=TRUE),
expected_paid = sum(targetamt, na.rm=TRUE))
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
amt_behind = sum(new_behind, na.rm=TRUE),
expected_paid = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_behind = amt_behind / expected_paid)
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded) %>%
#mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
totcolc = sum(totcolc, na.rm=TRUE),
targetamt = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
View(temp)
temp2 <- loans %>% filter(pre_period==1) %>% group_by(treatment, flooded) %>%
#mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
totcolc = sum(totcolc, na.rm=TRUE),
targetamt = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
View(temp2)
temp2 <- loans %>% filter(pre_period==1 & year==2016) %>% group_by(treatment, flooded) %>%
#mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
totcolc = sum(totcolc, na.rm=TRUE),
targetamt = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
temp <- loans %>% filter(post_period==1 & year==2016) %>% group_by(treatment, flooded) %>%
#mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
totcolc = sum(totcolc, na.rm=TRUE),
targetamt = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
View(temp2)
View(temp)
temp <- loans %>% filter(post_period==1 & year==2017) %>% group_by(treatment, flooded) %>%
#mutate(new_behind = ifelse(low_pay==1 & expected_paid < actual_paid, targetamt - totcolc, 0)) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE),
totcolc = sum(totcolc, na.rm=TRUE),
targetamt = sum(targetamt, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
View(temp)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded, em_loan, em_loan_other_loan) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE)) %>%
mutate(pct_collect = totcolc / targetamt)
temp <- loans %>% filter(post_period==1) %>% group_by(treatment, flooded, em_loan, em_loan_other_loan) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE))
View(temp)
temp <- arrange(temp, em_loan, flooded, treatment)
View(temp)
temp2 <- filter(loans, em_loan==TRUE, treatment==0)
View(temp2)
temp3 <- filter(loans, em_loan==TRUE, treatment==1)
#Add filter to remove bad data on EM loans (these are in control branches and are left over from old code regime)
loans %<>% filter(!(em_loan==TRUE & treatment==0))
temp <- loans %>% filter(post_period==1) %>%
group_by(treatment, flooded, em_loan, em_loan_other_loan) %>%
summarise(miss_pay_behind = mean(miss_pay_behind, na.rm=TRUE))
View(temp)
render_site()
rmarkdown::render_site()
library(rmarkdown)
render_site()
render_site()
setwd("~/Website/gregorylane.github.io")
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
