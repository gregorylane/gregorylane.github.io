sched_repay = round(loan_amount/12*1.26)) %>%
mutate(repay_month = 1,
brac_id = loan_id %% 50 +1)
loans <- left_join(loans, treats)
loans %<>% mutate(credit_demean = credit_score - mean(credit_score)) %>%
mutate(credit_treat = credit_demean * elig_treat)
#create random loan taking and filter to people who took loans (creates variation in # loans per branch)
loans %<>% mutate(prob_loan = 0.90 + 0.01*elig_treat) %>%
mutate(took_loan = rbinom(nrow(loans),1,prob_loan))
#merge in loan basic info with loan panel
loan_panel <- full_join(loan_panel, loans)
#carryforward loan info and remove obs that are randomly selected not to appear
loan_panel <- loan_panel %>% group_by(brac_id, loan_id) %>% na.locf()
loan_panel %<>% filter(took_loan==1)
loan_panel %<>% ungroup()
#generate loan repayment (use same code as above)
loan_panel %<>% mutate(prob_miss_pay = 0.16 - 0.008*elig_treat -0.011*credit_demean + 0.005*credit_demean*elig_treat) %>%
mutate(missed_pay = rbinom(nrow(loan_panel),1,prob_miss_pay))
loan_panel %<>% mutate(repaid = ifelse(missed_pay==0 & repay_month!=1, sched_repay + rnorm(1,mean=-50,sd=50), 0))
loan_panel %<>% mutate(month = month_disb + (repay_month -1)) %>%
mutate(year = ifelse(month > 12, year_disb+1, year_disb)) %>%
mutate(month = ifelse(month>12, month-12, month))
loan_panel %<>% left_join(members)
loan_panel %<>% mutate(loan_amount = ifelse(repay_month==1, loan_amount, NA))
### Run profit regs and re-package data for monthly / NPV regs
#calc profits
int_rate <- 0.005 #monthly cost of outstanding loans (6% annual interest)
loan_panel %<>% mutate(t = repay_month-1,
revenue = repaid/(1+int_rate)^t)
#re-name elig treat to just treatment
#write_csv2(loan_panel, "~/Dropbox/Berkeley/Bangladesh/Data Do Files/Clean for submission/replication/data/sim_panel_loans.csv")
#loan regs
temp <- loan_panel %>% group_by(branch_id, loan_id) %>%
summarise(branch_id = mean(branch_id, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year = min(year, na.rm=TRUE),
month = min(month, na.rm=TRUE)) %>%
mutate(credit_demean = credit_score - mean(credit_score, na.rm=TRUE))
temp %<>% mutate(profit = revenue - cost)
reg_profit <- felm(profit ~ elig_treat  | year + district | 0 | branch_id, data = temp)
summary(reg_profit)
#Heterogeneity treatment effect on profits (part of figure 1)
hetero <- temp %>%
mutate(bin = ntile(credit_score, 10))
col_data <- hetero %>% group_by(bin) %>% summarise(credit_score = mean(credit_score))
profit_reg <- function(x){
temp_reg <- felm(profit ~ elig_treat |
month + year  + district | 0 | branch_id, data = hetero %>% filter(bin==x))
beta <- as.numeric(temp_reg$coefficients[[1]])
se <- as.numeric(temp_reg$cse[[1]])
output <- cbind(beta, se)
return(output)
}
bins <- seq(1:10)
betas2 <- t(sapply(bins, profit_reg))
effects2 <- cbind(betas2, bins) %>% as.data.frame()
names(effects2) <- c("beta2", "se2", "bin")
col_data <-  merge(col_data, effects2, by="bin") %>%
mutate(upper = beta2 + 1.96*se2,
lower = beta2 - 1.96*se2)
hetero_treat_effect_profit <- ggplot(col_data, aes(x = credit_score, y=beta2)) +
geom_point() +
geom_line(aes(y=upper), linetype = 2) +
geom_line(aes(y=lower), linetype = 2) +
geom_smooth(method =lm, formula = y ~ splines::bs(x, 3), se=FALSE) +
xlab('Credit Score') + ylab('Treatment Effect on Per Person Profits') +
scale_colour_manual(name="Eligible", values=c("#F8766D", "#00BFC4")) +
theme_bw()
hetero_treat_effect_profit
rm(temp)
#Monthly branch - use per-person panel data, create income streams, collapse to month
temp <- loan_panel %>% group_by(branch_id, loan_id, month, year) %>%
summarise(branch_id = mean(branch_id, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE)) %>%
ungroup() %>%
group_by(branch_id, month, year) %>%
summarise(elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = sum(cost, na.rm=TRUE),
credit_score = mean(credit_score, na.rm=TRUE),
num_members = mean(num_members, na.rm=TRUE))
temp %<>% mutate(profit = revenue - cost)
reg_profit2 <- felm(profit ~ elig_treat |  month + year + district  | 0 | branch_id, data = temp)
summary(reg_profit2)
temp %<>% mutate(profit2 = profit / num_members)
reg_profit3 <- felm(profit2 ~ elig_treat  | month + year + district | 0 | branch_id, data = temp)
summary(reg_profit3)
#NPV - run code to estimate NPV paths for each credit-score, then merge back and then run regs
expected_profits <- loan_panel %>%
group_by(branch_id, brac_id, month, year) %>% #summarise for each person
summarise(branch_id = mean(branch_id, na.rm=TRUE),
elig_treat = mean(elig_treat, na.rm=TRUE),
district = first(district),
revenue = sum(revenue, na.rm=TRUE),
cost = mean(loan_amount, na.rm=TRUE),
year_disb = mean(year_disb),
month_disb = mean(month_disb),
num_members = mean(num_members, na.rm=TRUE),
credit_score = round(mean(credit_score, na.rm=TRUE),digits=1))
install.packages('devtools')
########### Set Up ###########
require(devtools)
install_version("rgdal", version="1.2-20")
library(SparkR)
install.packages('SparkR')
library(SparkR)
install.spark
Sys.getenv
#Initiate a SparkR session
sparkR.session()
install.packages("sparklyr")
########### Set Up ###########
require(devtools)
install_version("rgdal", version="1.2-20")
#library(SparkR)
library(sparklyr)
#Initiate a SparkR session
sparkR.session()
#library(SparkR)
library(sparklyr)
#Initiate a SparkR session
sparkR.session()
?sparklyr
??sparklyr
# Reading the continuous data
df1 <- read.df("/mnt/itsdtdatarstudioadlsprod/matatu/pan_continuous_2017-09-17.csv",
"csv",
header = "true",
inferSchema = "true")
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
require(devtools)
install_version("rgdal", version="1.2-20")
#Initiate a SparkR session
sparkR.session()
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
# Reading the continuous data
df1 <- read.df("/mnt/itsdtdatarstudioadlsprod/matatu/pan_continuous_2017-09-17.csv",
"csv",
header = "true",
inferSchema = "true")
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
#library(rgeos)
library(rgdal)
install.packages('rgdal')
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
#library(rgeos)
library(rgdal)
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
#library(rgeos)
#library(rgdal)
library(sp)
# Reading the continuous data
df1 <- read.df("/mnt/itsdtdatarstudioadlsprod/matatu/pan_continuous_2017-09-17.csv",
"csv",
header = "true",
inferSchema = "true")
#Set Path
dir_data <- "~/Dropbox/Matatu/data/continuous_backup"
# Reading the continuous data
df1 <- read.csv(paste0(dir_data, "pan_continuous_2017-09-17.csv")
)
#Set Path
dir_data <- "~/Library/CloudStorage/Dropbox/Matatu/data/continuous_backup"
# Reading the continuous data
df1 <- read.csv(paste0(dir_data, "pan_continuous_2017-09-17.csv"))
# Reading the continuous data
df1 <- read.csv(paste0(dir_data, "pan_continuous_2017-09-17.csv"))
#Set Path
dir_data <- "~/Library/CloudStorage/Dropbox/Matatu/data/"
# Reading the continuous data
df1 <- read.csv(paste0(dir_data, "pan_continuous_2017-09-17.csv"))
# Reading the continuous data
df1 <- read.csv("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/continuous_backup/pan_continuous_2017-09-17.csv")
colnames(df1)
df2 <- read.csv(paste0(dir_data, "7-26-17-pan-continuous-bkp2.csv"))
#Set Path
dir_data <- "/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/continuous_backup/"
df2 <- read.csv(paste0(dir_data, "7-26-17-pan-continuous-bkp2.csv"))
colnames(df2)
df3 <- read.csv(paste0(dir_data, "5-31-17-pan-continuous-bkp.csv"))
#Merging continuous data
df <- do.call("rbind", list(df1, df2))
rm(df1, df2, df3, df4, df5)
dim(df)
# Reading the participant data
df_participant <- read_dta(~/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta")%>%
# Reading the participant data
df_participant <- read_dta("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta")%>%
select(regnum, treat, stage, rid) %>%
rename(participant_id_ = regnum, treat_=treat) %>%
mutate(rid = as_factor(rid)) %>%
mutate(rid = as.character(rid))
# Reading the participant data
df_participant <- read_dta("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta")
%>%
# Reading the participant data
df_participant <- read_dta("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta")
names(df_participant)
# Reading the participant data
df_participant <- read_dta("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta") %>%
select(regnum_participant, treat, stage, rid) %>%
rename(regnum_participant = regnum) %>%
mutate(rid = as_factor(rid)) %>%
mutate(rid = as.character(rid))
# Reading the participant data
df_participant <- read_dta("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/replication/data/2_clean/participant.dta") %>%
select(regnum_participant, treat, stage, rid) %>%
rename(participant_id_ = regnum_participant, treat_=treat) %>%
mutate(rid = as_factor(rid)) %>%
mutate(rid = as.character(rid))
# Making a dataframe that maps rid in continuous data to digital matatus map
routes <- data.frame(rid = unique(df_participant$rid),
rid_digmat = c("8","15","32D","11","26","105","126","48B","20","106",
"20", "125","17B","239","NA")) %>%
mutate_all(funs(as.character(.)))
?mutate_all
head(routes)
class(routes$rid)
# Merging these routes to the participant table
df_participant <- left_join(df_participant, routes, by = "rid")
head(df_participant)
#Converting df_participant to SparkR before merging
df_participant<- zap_labels(df_participant) #removing labels
df_participant<-as.data.frame(df_participant)
df_participant.df<-as.data.frame(df_participant)
#df_participant.df <- as.DataFrame(df_participant)
# Merging participant table to the continuous data
df_merged <- join(df, df_participant.df,
df$participant_id == df_participant.df$participant_id_ & df$treat == df_participant.df$treat_,
"left")
?join
# Merging participant table to the continuous data
df_merged <- plyr::join(df, df_participant.df,
df$participant_id == df_participant.df$participant_id_ & df$treat == df_participant.df$treat_,
"left")
# Merging participant table to the continuous data
df_merged <- left_join(df, df_participant.df,
df$participant_id == df_participant.df$participant_id_ & df$treat == df_participant.df$treat_,
"left")
?left_join
# Merging participant table to the continuous data
df_merged <- left_join(df, df_participant.df,
by=c("participant_id" = "participant_id_", "treat = treat_")
)
names(df_participant.df)
# Merging participant table to the continuous data
df_merged <- left_join(df, df_participant.df,
by=c("participant_id" = "participant_id_", "treat" = "treat_")
)
df_merged$participant_id_ <- NULL
df_merged$treat_ <- NULL
```{r}
df_merged$participant_id_ <- NULL
df_merged$treat_ <- NULL
head(df_merged)
# Reading in the shape file -------------------------------------------------------------------------
matatu_routes <- readOGR("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/2.matatu_routes/mutatus_routes.shp")
# Reading in the shape file -------------------------------------------------------------------------
matatu_routes <- st_read("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/2.matatu_routes/mutatus_routes.shp")
?st_read
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
#library(rgeos)
#library(rgdal)
library(sp)
library(sf)
# Reading in the shape file -------------------------------------------------------------------------
matatu_routes <- st_read("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/2.matatu_routes/mutatus_routes.shp")
matatu_routes$rt_shrt_nm <- as.character(matatu_routes$rt_shrt_nm)
# Reading in the shape file -------------------------------------------------------------------------
matatu_routes <- st_read("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/2.matatu_routes/mutatus_routes.shp")
matatu_routes$rt_shrt_nm <- as.character(matatu_routes$rt_shrt_nm)
# Getting 13 unique routes
unique_routes <- select(df_merged, df_merged$rid_digmat) %>%
distinct() %>%
collect()
?select
# Getting 13 unique routes
unique_routes <- dplyr::select(df_merged, rid_digmat) %>%
distinct() %>%
collect()
unique_routes <- as.character(unique_routes$rid_digmat)
unique_routes
#Tracker lon and lat
df_sub <- df_merged[df_merged$rid_digmat %in% unique_routes[1]]
unique_routes[1]
rm(df)
#Tracker lon and lat
df_sub <- df_merged[df_merged$rid_digmat %in% unique_routes[1]]
#Tracker lon and lat
df_sub <- df_merged[df_merged$rid_digmat %in% unique_routes[1],]
#Digital Matatus shape file
matatu_sub <- matatu_routes[matatu_routes$rt_shrt_nm %in% unique_routes[1],]
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
class(matatu_routes)
matatu_routes$rt_shrt_nm
#Digital Matatus shape file
matatu_sub <- filter(matatu_routes, rt_shrt_nm %in% unique_routes[1])
unique_routes[1]
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
#Digital Matatus shape file
matatu_sub <- filter(matatu_routes, rt_shrt_nm %in% unique_routes[1])
#matatu_sub <- matatu_routes[matatu_routes$rt_shrt_nm %in% unique_routes[1],]
matatu_sub <- as.matrix(matatu_sub)
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
#Digital Matatus shape file
matatu_sub <- filter(matatu_routes, rt_shrt_nm %in% unique_routes[1])
#matatu_sub <- matatu_routes[matatu_routes$rt_shrt_nm %in% unique_routes[1],]
View(matatu_sub)
class(matatu_sub)
summary(matatu_sub)
matatu_sub$geometry
new_schema <- do.call(
structType, c(schema(df_sub)$fields(), list(structField("dist.distance", "double", TRUE),
structField("dist.lon", "double", TRUE),
structField("dist.lat", "double", TRUE))))
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
library(rgeos)
install.packages('rgeos')
library(data.table)
library(haven)
library(dplyr)
library(ggplot2)
library(magrittr)
library(stringi)
library(lfe)
library(stargazer)
library(ggthemes)
library(ggmap)
library(geosphere)
#library(rgeos) # "not available for this version of R"
library(rgdal)
install.packages('rgdal')
##Calc Distance
print(unique_routes[1])
matatu_sub@lines
class(matatu_sub)
summary(matatu_sub)
View(matatu_sub)
matatu_sub$geometry
temp <- matatu_sub$geometry
summary(temp)
View(temp)
temp$Value
class(temp)
summary(temp)
temp[[1]]
temp2 <- as.matrix( temp[[1]])
View(temp2)
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
matatu_sub$geometry[[1]]
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
names(matatu_sub)
> temp <- matatu_sub$geometry
temp <- matatu_sub$geometry
c1<- as.matrix(matatu_sub@lines[[1]]@Lines[[1]]@coords)
temp <- matatu_sub$geometry
c1 <- as.matrix(temp)
c1 <- as.matrix(temp[[1]])
new_schema <- do.call(
structType, c(schema(df_sub)$fields(), list(structField("dist.distance", "double", TRUE),
structField("dist.lon", "double", TRUE),
structField("dist.lat", "double", TRUE))))
c1
new_schema <- do.call(
structType, c(schema(df_sub)$fields(), list(structField("dist.distance", "double", TRUE),
structField("dist.lon", "double", TRUE),
structField("dist.lat", "double", TRUE))))
names(df_sub)
?structType
?dapply
?dist2Line
?dist2Line
df_sub <- apply(df_sub, function(x) { cbind(x, geosphere::dist2Line(cbind(x$lon, x$lat), c1))})
?apply
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x$lon, x$lat), c1))})
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x$lon, x$lat), c1))}, MARGIN=1)
?dist2Line
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x$lon, x$lat), c1))}, MARGIN=1)
names(df_sub)
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x[10], x[9]), c1))}, MARGIN=1)
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x[9], x[10]), c1))}, MARGIN=1)
summary(df_sub$lat)
summary(df_sub$lon)
summary(c1)
df_sub <- apply(df_sub, FUN = function(x) {geosphere::dist2Line(cbind(x[10], x[9]), c1))}, MARGIN=1)
df_sub <- apply(df_sub, FUN = function(x) {geosphere::dist2Line(cbind(x[10], x[9]), c1)}, MARGIN=1)
?apply
df_sub <- apply(df_sub, FUN = function(x) { cbind(x, geosphere::dist2Line(cbind(x[10], x[9]), c1))}, MARGIN=2)
read.csv("/Users/laneg/Library/CloudStorage/Dropbox/Matatu/data/continuous_distances/new_fromWBserver/all_rounds_final.csv")
setwd("~/Library/CloudStorage/Dropbox/Mac/Documents/Website/gregorylane.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
