names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
View(data)
data <- data %>% filter(!is.na(vo_id))
View(data)
View(data)
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
data <- read_excel(paste0(path2, files2))
names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id))
View(data)
View(data)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
data <- read_excel(paste0(path2, files2))
names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id) | remarks=="11" | remarks=="Remarks")
View(data)
data <- data %>% filter(!is.na(brac_id) | remarks=="11" | remarks=="Remarks")
View(data)
View(data)
data <- data %>% filter(!is.na(brac_id) | remarks!="11" | remarks!="Remarks")
View(data)
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
data <- read_excel(paste0(path2, files2))
names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id) | remarks!="11" | remarks!="Remarks")
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
data <- read_excel(paste0(path2, files2))
names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
View(data)
View(data)
#Merge in with the problematic branches that couldn't be read via method above
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
append_data2 <- function(X){
data <- read_excel(paste0(path2, files2))
names(data) <- names
data$hchyid <- as.numeric(str_extract(files2, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
append_data2 <- function(X){
data <- read_excel(paste0(path2, X))
names(data) <- names
data$hchyid <- as.numeric(str_extract(X, pattern="[0-9]+"))
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
View(problem_branches)
eligibility_2017a <- rbind(eligibility_2017, problem_branches)
library(pdftools)
##################### -----------------------------------------
# Read in 2017 Eligibility Emergency Loan Lists
# Created by Greg Sept 15, 2017
# Takes raw data (PDFs) and creates dataframe
##################### -----------------------------------------
# setup --------------------------------------------------------
library(pdftools)
library(dplyr)
library(stringr)
rm(list=ls())
options(stringsAsFactors = FALSE)
#Get list of paths of the PDF to be read
path <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/All/"
files <- list.files(path)
#Function to read in PDF, then change it into a data frame
append_data <- function(file) {
print(file)
myfile <- paste0(path, file)
pdftext <- pdf_text(myfile)
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Pull the branch ID from the header of the first page
branch_id <- as.numeric(str_extract(unlist(strsplit(pdftext, "\n"))[1], pattern="[0-9]+"))
print(branch_id)
#Function to take nasty string of PDF page and extract data
#Note that the data starts on row 8 or 9, so start the data extract at that point
create_data <- function(pdf) {
page1 <- unlist(strsplit(pdf, "\n")) #split the rows
df <-lapply(X=8:(length(page1)-1),
FUN=function(i) {
data.frame(t(grep("[[:alnum:]]+" , unlist(strsplit(page1[i], "  ")), value=TRUE ))) #split the rows by gaps, then only select cells that contain alpha numeric info
}) %>% bind_rows()
names(df) <- names
df$hchyid <- branch_id
return(df)
}
data <- bind_rows(lapply(pdftext, FUN=create_data))[-1,] #Drop first row b/c that is just col numbers from first page
return(data)
}
eligibility_2017 <- bind_rows(lapply(files, FUN=append_data)) %>% unique()
#Merge in with the problematic branches that couldn't be read via method above
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Function to read excels files and append
append_data2 <- function(X){
data <- read_excel(paste0(path2, X))
names(data) <- names
data$hchyid <- as.numeric(str_extract(X, pattern="[0-9]+"))
#Clean-up data
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
#Merge with Good PDF data
eligibility_2017 <- rbind(eligibility_2017, problem_branches)
write_csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
library(foreign)
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique()
summary(eligibility_2017)
View(eligibility_2017)
?mutate_at
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, maxdisbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, crediscore),
as.numeric)
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, max_disbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, crediscore),
as.numeric)
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, max_disbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, creditscore),
as.numeric)
summary(eligibility_2017)
temp <- filter(eligibility_2017, is.na(creditscore))
View(temp)
#Merge with Good PDF data
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, max_disbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, creditscore),
as.numeric)
write_csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
??write_csv
write.csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
##################### -----------------------------------------
# Read in 2017 Eligibility Emergency Loan Lists
# Created by Greg Sept 15, 2017
# Takes raw data (PDFs) and creates dataframe
##################### -----------------------------------------
# setup --------------------------------------------------------
library(pdftools)
library(dplyr)
library(stringr)
library(foreign)
rm(list=ls())
options(stringsAsFactors = FALSE)
#Get list of paths of the PDF to be read
path <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/All/"
files <- list.files(path)
#Function to read in PDF, then change it into a data frame
append_data <- function(file) {
print(file)
myfile <- paste0(path, file)
pdftext <- pdf_text(myfile)
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Pull the branch ID from the header of the first page
branch_id <- as.numeric(str_extract(unlist(strsplit(pdftext, "\n"))[1], pattern="[0-9]+"))
print(branch_id)
#Function to take nasty string of PDF page and extract data
#Note that the data starts on row 8 or 9, so start the data extract at that point
create_data <- function(pdf) {
page1 <- unlist(strsplit(pdf, "\n")) #split the rows
df <-lapply(X=8:(length(page1)-1),
FUN=function(i) {
data.frame(t(grep("[[:alnum:]]+" , unlist(strsplit(page1[i], "  ")), value=TRUE ))) #split the rows by gaps, then only select cells that contain alpha numeric info
}) %>% bind_rows()
names(df) <- names
df$hchyid <- branch_id
return(df)
}
data <- bind_rows(lapply(pdftext, FUN=create_data))[-1,] #Drop first row b/c that is just col numbers from first page
return(data)
}
eligibility_2017 <- bind_rows(lapply(files, FUN=append_data)) %>% unique()
#Merge in with the problematic branches that couldn't be read via method above
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Function to read excels files and append
append_data2 <- function(X){
data <- read_excel(paste0(path2, X))
names(data) <- names
data$hchyid <- as.numeric(str_extract(X, pattern="[0-9]+"))
#Clean-up data
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
#Merge with Good PDF data
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, max_disbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, creditscore),
as.numeric)
length(unique(eligibility_2017 %>% select(hchyid)))
View(eligibility_2017)
temp <- eligibility_2017 %>% select(hchyid)
View(temp)
unique(temp)
length(unique(temp))
nrow(unqiue(temp))
nrow(unique(temp))
temp <- unique(temp)
View(temp)
rm(temp)
temp <- filter(eligibility_2017, hchyid==1451)
View(temp)
library(foreign)
library(tidyr)
##################### -----------------------------------------
# Read in 2017 Eligibility Emergency Loan Lists
# Created by Greg Sept 15, 2017
# Takes raw data (PDFs) and creates dataframe
##################### -----------------------------------------
# setup --------------------------------------------------------
library(pdftools)
library(dplyr)
library(stringr)
library(foreign)
rm(list=ls())
options(stringsAsFactors = FALSE)
#Get list of paths of the PDF to be read
path <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/All/"
files <- list.files(path)
#Function to read in PDF, then change it into a data frame
append_data <- function(file) {
print(file)
myfile <- paste0(path, file)
pdftext <- pdf_text(myfile)
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Pull the branch ID from the header of the first page
branch_id <- as.numeric(str_extract(unlist(strsplit(pdftext, "\n"))[1], pattern="[0-9]+"))
print(branch_id)
#Function to take nasty string of PDF page and extract data
#Note that the data starts on row 8 or 9, so start the data extract at that point
create_data <- function(pdf) {
page1 <- unlist(strsplit(pdf, "\n")) #split the rows
df <-lapply(X=8:(length(page1)-1),
FUN=function(i) {
data.frame(t(grep("[[:alnum:]]+" , unlist(strsplit(page1[i], "  ")), value=TRUE ))) #split the rows by gaps, then only select cells that contain alpha numeric info
}) %>% bind_rows()
names(df) <- names
df$hchyid <- branch_id
return(df)
}
data <- bind_rows(lapply(pdftext, FUN=create_data))[-1,] #Drop first row b/c that is just col numbers from first page
return(data)
}
eligibility_2017 <- bind_rows(lapply(files, FUN=append_data)) %>% unique()
#Merge in with the problematic branches that couldn't be read via method above
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Function to read excels files and append
append_data2 <- function(X){
data <- read_excel(paste0(path2, X))
names(data) <- names
data$hchyid <- as.numeric(str_extract(X, pattern="[0-9]+"))
#Clean-up data
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
#Merge with Good PDF data
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, max_disbamt, missed_pct, avg_pct_behind, max_pct_behind, week_member, creditscore),
as.numeric)
# check number of unique branches (should be at least 200) - it is
nrow(unique(elgibility_2017 %>% select(hchyid)))
# write out csv for use in sample selection
write.csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
##################### -----------------------------------------
# Read in 2017 Eligibility Emergency Loan Lists
# Created by Greg Sept 15, 2017
# Takes raw data (PDFs) and creates dataframe
##################### -----------------------------------------
# setup --------------------------------------------------------
library(pdftools)
library(dplyr)
library(stringr)
library(foreign)
rm(list=ls())
options(stringsAsFactors = FALSE)
#Get list of paths of the PDF to be read
path <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/All/"
files <- list.files(path)
#Function to read in PDF, then change it into a data frame
append_data <- function(file) {
print(file)
myfile <- paste0(path, file)
pdftext <- pdf_text(myfile)
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Pull the branch ID from the header of the first page
branch_id <- as.numeric(str_extract(unlist(strsplit(pdftext, "\n"))[1], pattern="[0-9]+"))
print(branch_id)
#Function to take nasty string of PDF page and extract data
#Note that the data starts on row 8 or 9, so start the data extract at that point
create_data <- function(pdf) {
page1 <- unlist(strsplit(pdf, "\n")) #split the rows
df <-lapply(X=8:(length(page1)-1),
FUN=function(i) {
data.frame(t(grep("[[:alnum:]]+" , unlist(strsplit(page1[i], "  ")), value=TRUE ))) #split the rows by gaps, then only select cells that contain alpha numeric info
}) %>% bind_rows()
names(df) <- names
df$hchyid <- branch_id
return(df)
}
data <- bind_rows(lapply(pdftext, FUN=create_data))[-1,] #Drop first row b/c that is just col numbers from first page
return(data)
}
eligibility_2017 <- bind_rows(lapply(files, FUN=append_data)) %>% unique()
#Merge in with the problematic branches that couldn't be read via method above
library(readxl)
path2 <- "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/"
files2 <- list.files("~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/Problem PDF/Problem excels/")
names <- c("vo_id", "vo_name", "brac_id", "member_name", "max_disbamt", "missed_pct",
"avg_pct_behind", "max_pct_behind", "week_member", "creditscore", "remarks")
#Function to read excels files and append
append_data2 <- function(X){
data <- read_excel(paste0(path2, X))
names(data) <- names
data$hchyid <- as.numeric(str_extract(X, pattern="[0-9]+"))
#Clean-up data
data <- data %>% filter(!is.na(brac_id), remarks!="11", remarks!="Remarks")
return(data)
}
problem_branches <- bind_rows(lapply(files2, FUN=append_data2))
#Merge with Good PDF data
eligibility_2017 <- rbind(eligibility_2017, problem_branches) %>% unique() %>%
mutate_at(vars(vo_id, brac_id, missed_pct, avg_pct_behind, max_pct_behind, week_member, creditscore),
as.numeric)
# check number of unique branches (should be at least 200) - it is
nrow(unique(elgibility_2017 %>% select(hchyid)))
# write out csv for use in sample
write.csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
nrow(unique(eligibility_2017 %>% select(hchyid)))
write.csv(eligibility_2017, "~/Dropbox/Berkeley/Bangladesh/Data Raw/Preapproved list 2017/eligibility_2017.csv")
?read.csv
write.csv()
?write.csv()
?assign
temp <- 5
?get()
options(device = "RStudioGD")
system()
rm(list = ls())
options(stringsAsFactors = FALSE)
library(tidyverse)
library(magrittr)
library(foreign)
library(readxl)
library(lubridate)
library(ggplot2)
library(lfe)
if(Sys.info()["user"] == "erinmkelley") {
setwd("~/Dropbox/NSDC/Data Acquisiion/")
}
if(Sys.info()["user"] == "gregorylane") {
setwd("~/Dropbox/Berkeley/Research/NSDC/Data Acquisition/")
}
data <- read_excel("sample/20171129_Sep2016Aug2017.xlsx")
# clean data ----------------------------------------
names(data) %<>% tolower
#keep only vars that seem to be useful (for first pass)
workers <- data %>% select(candid, castecategory, educationattained, gender, grade, religion,
result, 'total theory marks', 'total practical marks',
totalmarkobtained, batchid, 'batch start date', 'batch end date',
'assessment date', trainerid, trainergender, centreid,
jobroleid, jobrole, jobrolelevel, jobroletype,
sectorid, sectorname, subsectorid, subsectorname, assessmentstatus,
statecode, district, 'placement status', cerified, monthlyincome, yearofbirth)
#rename & clean-up
workers %<>% rename(id = candid,
caste = castecategory,
eduction = educationattained,
theory_score = 'total theory marks',
practical_score = 'total practical marks',
total_score = totalmarkobtained,
start_date = 'batch start date',
end_date = 'batch end date',
test_date ='assessment date',
trainer_id = trainerid,
trainer_gender = trainergender,
center_id = centreid,
job_id = jobroleid,
job_level = jobrolelevel,
job_type = jobroletype,
placement = 'placement status',
certified = cerified) %>%
mutate(STOBC = caste %in% c('ST', 'OBC'),
male = gender == 'Male',
grade = gsub(grade ,pattern="Grade ", replacement=""),
hindu = religion=="Hinduism",
passed = result=="Pass",
start_date = as.POSIXct(start_date),
end_date = as.POSIXct(end_date),
test_date = as.POSIXct(test_date),
trainer_gender = trainer_gender == 'Male', #NOTE: there are transgender trainers, but keep binary for now
placement = placement=="Yes",
certified = certified=="Yes",
monthlyincome = as.numeric(monthlyincome)) %>% #Note: need to fix education, but need years equivalents
select(-c(caste, gender, religion, result))
#sectors
sector <- workers %>% group_by(sectorid, certified) %>%
summarise(max_score = max(total_score),
min_score = min(total_score),
avg_score = mean(total_score),
name = first(sectorname),
count = n())
#this looks close, but not consistent - some sectors with min certified scores below max non-certified
#doesn't work with subsector either
#filter sectors that don't have many obs (<500)
workers %<>% group_by(sectorid) %>% mutate(obs = n()) %>% filter(obs > 200)
ggplot(workers %>% filter(subsectorid==5), aes(x = total_score)) +
geom_histogram(data =workers %>% filter(certified==TRUE, subsectorid==5) , binwidth = 5, alpha=0.4, fill="red") +
geom_histogram(data =workers %>% filter(certified==FALSE, subsectorid==5, total_score!=0) , binwidth = 5, alpha=0.4, fill="blue") +
ggtitle("Electronics & Hardware (red = certified, blue = not certified")
ggplot(workers %>% filter(subsectorid==49), aes(x = total_score)) +
geom_histogram(data =workers %>% filter(certified==TRUE, subsectorid==49) , binwidth = 10, alpha=0.4, fill="red") +
geom_histogram(data =workers %>% filter(certified==FALSE, subsectorid==49, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
ggtitle("Beauty and Wellness (red = certified, blue = not certified)")
ggplot(workers %>% filter(subsectorid==14), aes(x = total_score)) +
geom_histogram(data =workers %>% filter(certified==TRUE, subsectorid==14) , binwidth = 10, alpha=0.4, fill="red") +
geom_histogram(data =workers %>% filter(certified==FALSE, subsectorid==14, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
ggtitle("Tourism (red = certified, blue = not certified)")
ggplot(workers %>% filter(subsectorid==11), aes(x = total_score)) +
geom_histogram(data =workers %>% filter(certified==TRUE, subsectorid==11) , binwidth = 10, alpha=0.4, fill="red") +
geom_histogram(data =workers %>% filter(certified==FALSE, subsectorid==11, total_score!=0) , binwidth = 10, alpha=0.4, fill="blue") +
ggtitle("Retail (red = certified, blue = not certified)")
rd_data <- filter(workers, subsectorid %in% c(9, 68, 49, 14, 13))
#grab min qualifying score as threshold - assume that non-certified above that threshold didn't pass for other reason
#this is big assumption, which we should check with NSDC
rd_data <- left_join(rd_data,
rd_data %>% group_by(subsectorid, certified) %>%
summarise(threshold = min(total_score)) %>% ungroup() %>%
filter(certified==TRUE) %>% select(-certified),
by = 'subsectorid') %>%
mutate(running = total_score - threshold, above = running > 0, above_run = above * running)
#plot combined distribution of running variable around threshold - this looks good
ggplot(rd_data %>% filter(total_score!=0), aes(x = running)) +
geom_histogram(binwidth = 5, alpha=0.6) +
geom_vline(xintercept=0, colour="gray") +
ggtitle('Combined Centered Scores') +
xlab("Centered Test Score")
pwd
cd
dir
library(rmarkdown)
render_site()
render_site()
render_site()
setwd("~/Website/gregorylane.github.io)
""
''
''
""
setwd("~/Website/gregorylane.github.io")
render_site()
render_site()
pwd
pwd()
dir
cwd
getwd
getwd()
setwd(Users/gregoryland)
setwd(/Users/gregorylane)
setwd("/Users/gregorylane")
setwd("~/Website/gregorylane.github.io")
render_site()
render_site()
render_site()
render_site()
getwd
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
setwd(~/gregorylane/Website/gregorylane.github.io)
setwd("~/gregorylane/Website/gregorylane.github.io")
